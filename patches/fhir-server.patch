From d340ae601ffb21a927953f33c8c8b36e0cafb039 Mon Sep 17 00:00:00 2001
From: zeyang <592369195@qq.com>
Date: Sat, 1 Oct 2022 21:12:52 -0500
Subject: [PATCH] eval

---
 .../Storage/FhirCosmosClientInitializer.cs    |   3 +-
 .../Rest/VersionSpecificTests.cs              |   9 -
 .../Rest/VersionSpecificTests.cs              |   9 -
 .../CrucibleTestFixture.cs                    |   2 +-
 .../Rest/AnonymizedExportTests.cs             |   2 +-
 .../Rest/AnonymizedExportUsingAcrTests.cs     |   2 +-
 .../Rest/Audit/AuditTests.cs                  |  57 +-
 .../Rest/BasicAuthTests.cs                    |   2 +-
 .../Rest/BatchTests.cs                        |   2 +-
 .../Rest/CompartmentTests.cs                  |   2 +-
 .../Rest/ConditionalCreateTests.cs            |   2 +-
 .../Rest/ConditionalDeleteTests.cs            |   2 +-
 .../Rest/ConditionalPatchTests.cs             |   2 +-
 .../Rest/ConditionalUpdateTests.cs            |   2 +-
 .../Rest/ConvertDataTests.cs                  |   2 +-
 .../Rest/CorsTests.cs                         |   2 +-
 .../Rest/CreateTests.cs                       |   2 +-
 .../Rest/CustomConvertDataTests.cs            |   2 +-
 .../Rest/CustomHeadersTests.cs                |   2 +-
 .../Rest/DeleteTests.cs                       |   2 +-
 .../Rest/EverythingOperationTests.cs          |   2 +-
 .../Rest/ExceptionTests.cs                    |   2 +-
 .../Rest/ExportDataValidationTests.cs         |   2 +-
 .../Rest/ExportLongRunningTests.cs            |   2 +-
 .../Rest/ExportTests.cs                       |   2 +-
 .../Rest/FhirPathPatchTests.cs                |   2 +-
 .../Rest/HealthTests.cs                       |   2 +-
 .../Rest/HistoryTests.cs                      |   2 +-
 .../Rest/Import/ImportBasicSearchTests.cs     |  27 -
 .../Rest/Import/ImportCompositeSearchTests.cs |  76 --
 .../Rest/Import/ImportDateSearchTests.cs      | 132 ---
 .../Rest/Import/ImportNumberSearchTests.cs    |  38 -
 .../Rest/Import/ImportQuantitySearchTests.cs  | 143 ----
 .../Rest/Import/ImportReferenceSearchTests.cs |  22 -
 .../Rest/Import/ImportStringSearchTests.cs    | 109 ---
 .../Rest/Import/ImportTests.cs                | 580 -------------
 .../Rest/Import/ImportTokenSearchTests.cs     |  89 --
 .../Rest/Import/ImportUriSearchTests.cs       |  21 -
 .../Rest/JsonPatchTests.cs                    |   2 +-
 .../Rest/MemberMatchTests.cs                  |   2 +-
 .../Rest/MetadataTests.cs                     |   2 +-
 .../Rest/Metric/MetricTests.cs                |  36 -
 .../Rest/ObservationResolveReferenceTests.cs  |   2 +-
 .../Rest/OperationVersionsTests.cs            |   2 +-
 .../Rest/ReadTests.cs                         |   2 +-
 .../Rest/Search/BasicSearchTests.cs           |  33 +-
 .../Rest/Search/CanonicalSearchTests.cs       |   2 +-
 .../Rest/Search/ChainingAndSortTests.cs       |  69 --
 .../Rest/Search/ChainingSearchTests.cs        |  36 +-
 .../Rest/Search/CompositeSearchTests.cs       |   2 +-
 .../Rest/Search/CustomSearchParamTests.cs     |   2 +-
 .../Rest/Search/DateSearchTests.cs            |   2 +-
 .../Rest/Search/IncludeSearchTests.cs         | 790 +-----------------
 .../Rest/Search/NumberSearchTests.cs          |   2 +-
 .../Rest/Search/QuantitySearchTests.cs        |   2 +-
 .../Rest/Search/ReferenceSearchTests.cs       |   2 +-
 .../Rest/Search/SortTests.cs                  | 311 +------
 .../Rest/Search/StringSearchTests.cs          |  18 +-
 .../Rest/Search/TokenSearchTests.cs           |   2 +-
 .../Rest/Search/UriSearchTests.cs             |   2 +-
 .../Rest/TransactionTests.cs                  | 323 -------
 .../Rest/UpdateTests.cs                       |   2 +-
 .../Rest/VReadTests.cs                        |   2 +-
 .../Rest/ValidateTests.cs                     |   2 +-
 .../FhirOperationDataStoreExportTests.cs      |  13 -
 .../Persistence/FhirStorageTests.cs           | 108 ---
 .../SqlServerTransactionScopeTests.cs         |  84 --
 .../Rest/VersionSpecificTests.cs              |   9 -
 68 files changed, 51 insertions(+), 3178 deletions(-)

diff --git a/src/Microsoft.Health.Fhir.CosmosDb/Features/Storage/FhirCosmosClientInitializer.cs b/src/Microsoft.Health.Fhir.CosmosDb/Features/Storage/FhirCosmosClientInitializer.cs
index 97bb39a5..0cae84df 100644
--- a/src/Microsoft.Health.Fhir.CosmosDb/Features/Storage/FhirCosmosClientInitializer.cs
+++ b/src/Microsoft.Health.Fhir.CosmosDb/Features/Storage/FhirCosmosClientInitializer.cs
@@ -64,8 +64,9 @@ namespace Microsoft.Health.Fhir.CosmosDb.Features.Storage
 
             IEnumerable<RequestHandler> requestHandlers = _requestHandlerFactory.Invoke();
 
+            // .WithConnectionModeDirect(enableTcpConnectionEndpointRediscovery: true)
             var builder = new CosmosClientBuilder(host, key)
-                .WithConnectionModeDirect(enableTcpConnectionEndpointRediscovery: true)
+                .WithConnectionModeGateway()
                 .WithCustomSerializer(new FhirCosmosSerializer())
                 .WithThrottlingRetryOptions(TimeSpan.FromSeconds(configuration.RetryOptions.MaxWaitTimeInSeconds), configuration.RetryOptions.MaxNumberOfRetries)
                 .AddCustomHandlers(requestHandlers.ToArray());
diff --git a/test/Microsoft.Health.Fhir.R4.Tests.E2E/Rest/VersionSpecificTests.cs b/test/Microsoft.Health.Fhir.R4.Tests.E2E/Rest/VersionSpecificTests.cs
index b14e616c..ca2a7e17 100644
--- a/test/Microsoft.Health.Fhir.R4.Tests.E2E/Rest/VersionSpecificTests.cs
+++ b/test/Microsoft.Health.Fhir.R4.Tests.E2E/Rest/VersionSpecificTests.cs
@@ -35,15 +35,6 @@ namespace Microsoft.Health.Fhir.Tests.E2E.Rest
             Assert.NotNull(actual);
         }
 
-        [Fact]
-        [HttpIntegrationFixtureArgumentSets(DataStore.SqlServer)]
-        public async Task GivenAnObservation_WithInvalidDecimalSpecification_ThenBadRequestShouldBeReturned()
-        {
-            var resource = Samples.GetJsonSample<Observation>("ObservationWithInvalidDecimalSpecification");
-            using FhirException exception = await Assert.ThrowsAsync<FhirException>(() => _client.CreateAsync(resource));
-            Assert.Equal(HttpStatusCode.BadRequest, exception.StatusCode);
-        }
-
         [Fact]
         public async Task GivenANewR4ResourceType_WhenCreated_ThenCorrectResourceShouldBeReturned()
         {
diff --git a/test/Microsoft.Health.Fhir.R5.Tests.E2E/Rest/VersionSpecificTests.cs b/test/Microsoft.Health.Fhir.R5.Tests.E2E/Rest/VersionSpecificTests.cs
index dd225bf1..9473c0ed 100644
--- a/test/Microsoft.Health.Fhir.R5.Tests.E2E/Rest/VersionSpecificTests.cs
+++ b/test/Microsoft.Health.Fhir.R5.Tests.E2E/Rest/VersionSpecificTests.cs
@@ -35,15 +35,6 @@ namespace Microsoft.Health.Fhir.Tests.E2E.Rest
             Assert.NotNull(actual);
         }
 
-        [Fact]
-        [HttpIntegrationFixtureArgumentSets(DataStore.SqlServer)]
-        public async Task GivenAnObservation_WithInvalidDecimalSpecification_ThenBadRequestShouldBeReturned()
-        {
-            var resource = Samples.GetJsonSample<Observation>("ObservationWithInvalidDecimalSpecification");
-            using FhirException exception = await Assert.ThrowsAsync<FhirException>(() => _client.CreateAsync(resource));
-            Assert.Equal(HttpStatusCode.BadRequest, exception.StatusCode);
-        }
-
         [Fact]
         public async Task GivenANewR5ResourceType_WhenCreated_ThenCorrectResourceShouldBeReturned()
         {
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.Crucible/CrucibleTestFixture.cs b/test/Microsoft.Health.Fhir.Shared.Tests.Crucible/CrucibleTestFixture.cs
index c1dc8d59..fd954d50 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.Crucible/CrucibleTestFixture.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.Crucible/CrucibleTestFixture.cs
@@ -12,7 +12,7 @@ using Xunit;
 
 namespace Microsoft.Health.Fhir.Tests.E2E.Crucible
 {
-    [HttpIntegrationFixtureArgumentSets(DataStore.All, Format.Json)]
+    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.Json)]
     public class CrucibleTestFixture : IClassFixture<CrucibleDataSource>
     {
         private readonly CrucibleDataSource _dataSource;
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/AnonymizedExportTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/AnonymizedExportTests.cs
index 4c60f5f4..62b6d5a7 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/AnonymizedExportTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/AnonymizedExportTests.cs
@@ -32,7 +32,7 @@ using Task = System.Threading.Tasks.Task;
 namespace Microsoft.Health.Fhir.Tests.E2E.Rest
 {
     [Trait(Traits.Category, Categories.AnonymizedExport)]
-    [HttpIntegrationFixtureArgumentSets(DataStore.All, Format.Json)]
+    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.Json)]
     public class AnonymizedExportTests : IClassFixture<ExportTestFixture>
     {
         private const string LocalIntegrationStoreConnectionString = "UseDevelopmentStorage=true";
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/AnonymizedExportUsingAcrTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/AnonymizedExportUsingAcrTests.cs
index 2ca0333a..225d471c 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/AnonymizedExportUsingAcrTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/AnonymizedExportUsingAcrTests.cs
@@ -39,7 +39,7 @@ using Task = System.Threading.Tasks.Task;
 namespace Microsoft.Health.Fhir.Tests.E2E.Rest
 {
     [Trait(Traits.Category, Categories.AnonymizedExport)]
-    [HttpIntegrationFixtureArgumentSets(DataStore.All, Format.Json)]
+    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.Json)]
     public class AnonymizedExportUsingAcrTests : IClassFixture<ExportTestFixture>
     {
         private const string TestRepositoryName = "testanonymizationconfigs";
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Audit/AuditTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Audit/AuditTests.cs
index f6fb6b78..de3ce9c1 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Audit/AuditTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Audit/AuditTests.cs
@@ -393,7 +393,7 @@ namespace Microsoft.Health.Fhir.Tests.E2E.Rest.Audit
                 expectedAppId: TestApplications.NativeClient.ClientId);
         }
 
-        [HttpIntegrationFixtureArgumentSets(DataStore.All)]
+        [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb)]
         [SkippableFact]
         [Trait(Traits.Priority, Priority.One)]
         [Trait(Traits.Category, Categories.Batch)]
@@ -426,7 +426,7 @@ namespace Microsoft.Health.Fhir.Tests.E2E.Rest.Audit
                TestApplications.GlobalAdminServicePrincipal.ClientId);
         }
 
-        [HttpIntegrationFixtureArgumentSets(DataStore.All)]
+        [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb)]
         [SkippableFact]
         [Trait(Traits.Priority, Priority.One)]
         [Trait(Traits.Category, Categories.Authorization)]
@@ -509,59 +509,6 @@ namespace Microsoft.Health.Fhir.Tests.E2E.Rest.Audit
                 inspectors.ToArray());
         }
 
-        [SkippableFact]
-        [HttpIntegrationFixtureArgumentSets(dataStores: DataStore.SqlServer)]
-        [Trait(Traits.Category, Categories.Transaction)]
-        [Trait(Traits.Priority, Priority.One)]
-        public async Task GivenATransactionBundleWithValidEntries_WhenSuccessfulPost_ThenAuditLogEntriesShouldBeCreated()
-        {
-            var requestBundle = Samples.GetTransactionBundleWithValidEntries();
-            var batch = requestBundle.ToPoco<Bundle>();
-
-            await _client.UpdateAsync<Patient>(batch.Entry[2].Resource as Patient);
-
-            // Even entries are audit executed entry and odd entries are audit executing entry
-            List<(string expectedActions, string expectedPathSegments, HttpStatusCode? expectedStatusCodes, ResourceType? resourceType)> expectedList = new List<(string, string, HttpStatusCode?, ResourceType?)>
-            {
-                ("transaction", string.Empty, HttpStatusCode.OK, null),
-                ("create", batch.Entry[0].Request.Url, HttpStatusCode.Created, ResourceType.Patient),
-                ("conditional-create", batch.Entry[1].Request.Url, HttpStatusCode.Created, ResourceType.Patient),
-                ("update", batch.Entry[2].Request.Url, HttpStatusCode.OK, ResourceType.Patient),
-                ("conditional-update", batch.Entry[3].Request.Url, HttpStatusCode.Created, ResourceType.Patient),
-            };
-
-            await ExecuteAndValidateBundle(
-               () => _client.PostBundleAsync(requestBundle.ToPoco<Hl7.Fhir.Model.Bundle>()),
-               expectedList,
-               TestApplications.GlobalAdminServicePrincipal.ClientId);
-        }
-
-        [SkippableFact]
-        [HttpIntegrationFixtureArgumentSets(dataStores: DataStore.SqlServer)]
-        [Trait(Traits.Category, Categories.Transaction)]
-        [Trait(Traits.Priority, Priority.One)]
-        public async Task GivenATransactionBundle_WhenAnUnsuccessfulPost_ThenTransactionShouldRollBackAndAuditLogEntriesShouldBeCreated()
-        {
-            List<(string expectedActions, string expectedPathSegments, HttpStatusCode? expectedStatusCodes, ResourceType? resourceType)> expectedList = new List<(string, string, HttpStatusCode?, ResourceType?)>
-            {
-                ("transaction", string.Empty, HttpStatusCode.NotFound, null),
-                ("create", "Patient", HttpStatusCode.Created, ResourceType.Patient),
-                ("read", "Patient/12345", HttpStatusCode.NotFound, ResourceType.Patient),
-            };
-
-            var requestBundle = Samples.GetJsonSample("Bundle-TransactionForRollBack");
-
-            await ExecuteAndValidateBundle(
-              async () =>
-              {
-                  using var fhirException = await Assert.ThrowsAsync<FhirException>(async () => await _client.PostBundleAsync(requestBundle.ToPoco<Bundle>()));
-
-                  return fhirException.Response;
-              },
-              expectedList,
-              TestApplications.GlobalAdminServicePrincipal.ClientId);
-        }
-
         private async Task ExecuteAndValidate<T>(Func<Task<FhirResponse<T>>> action, string expectedAction, ResourceType? expectedResourceType, Func<T, string> expectedPathGenerator, HttpStatusCode expectedStatusCode)
             where T : Resource
         {
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/BasicAuthTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/BasicAuthTests.cs
index 27b0b426..9ca21b54 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/BasicAuthTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/BasicAuthTests.cs
@@ -28,7 +28,7 @@ namespace Microsoft.Health.Fhir.Tests.E2E.Rest
     /// NOTE: These tests will fail if security is disabled..
     /// </summary>
     [Trait(Traits.Category, Categories.Authorization)]
-    [HttpIntegrationFixtureArgumentSets(DataStore.All, Format.Json)]
+    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.Json)]
     public class BasicAuthTests : IClassFixture<HttpIntegrationTestFixture>
     {
         private static readonly Regex WwwAuthenticatePattern = new Regex(@"authorization_uri=\""(?<authorization_uri>[^\s,]+)+\"", resource_id=\""(?<resource_id>[^\s,]+)+\"", realm=\""(?<realm>[^\s,]+)+\""", RegexOptions.IgnoreCase);
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/BatchTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/BatchTests.cs
index 5ccbdddd..c16b4eaa 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/BatchTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/BatchTests.cs
@@ -20,7 +20,7 @@ using Task = System.Threading.Tasks.Task;
 namespace Microsoft.Health.Fhir.Tests.E2E.Rest
 {
     [Trait(Traits.Category, Categories.Batch)]
-    [HttpIntegrationFixtureArgumentSets(DataStore.All, Format.All)]
+    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.All)]
     public class BatchTests : IClassFixture<HttpIntegrationTestFixture>
     {
         private readonly TestFhirClient _client;
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/CompartmentTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/CompartmentTests.cs
index ca0064c0..de333f87 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/CompartmentTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/CompartmentTests.cs
@@ -14,7 +14,7 @@ using Task = System.Threading.Tasks.Task;
 
 namespace Microsoft.Health.Fhir.Tests.E2E.Rest.Search
 {
-    [HttpIntegrationFixtureArgumentSets(DataStore.All, Format.Json)]
+    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.Json)]
     [Trait(Traits.Category, Categories.Search)]
     [Trait(Traits.Category, Categories.CompartmentSearch)]
     public class CompartmentTests : SearchTestsBase<CompartmentTestFixture>
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ConditionalCreateTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ConditionalCreateTests.cs
index 847c8240..ffe50fc4 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ConditionalCreateTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ConditionalCreateTests.cs
@@ -18,7 +18,7 @@ using Task = System.Threading.Tasks.Task;
 
 namespace Microsoft.Health.Fhir.Tests.E2E.Rest
 {
-    [HttpIntegrationFixtureArgumentSets(DataStore.All, Format.All)]
+    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.All)]
     [Trait(Traits.Category, Categories.ConditionalCreate)]
     public class ConditionalCreateTests : IClassFixture<HttpIntegrationTestFixture<Startup>>
     {
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ConditionalDeleteTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ConditionalDeleteTests.cs
index 19e650c0..45b58cf7 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ConditionalDeleteTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ConditionalDeleteTests.cs
@@ -23,7 +23,7 @@ using Task = System.Threading.Tasks.Task;
 
 namespace Microsoft.Health.Fhir.Tests.E2E.Rest
 {
-    [HttpIntegrationFixtureArgumentSets(DataStore.All, Format.All)]
+    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.All)]
     public class ConditionalDeleteTests : IClassFixture<HttpIntegrationTestFixture<Startup>>
     {
         private const string _resourceType = KnownResourceTypes.Encounter;
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ConditionalPatchTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ConditionalPatchTests.cs
index 708e40ce..75d66207 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ConditionalPatchTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ConditionalPatchTests.cs
@@ -19,7 +19,7 @@ using Task = System.Threading.Tasks.Task;
 
 namespace Microsoft.Health.Fhir.Tests.E2E.Rest
 {
-    [HttpIntegrationFixtureArgumentSets(DataStore.All, Format.Json)]
+    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.Json)]
     [Trait(Traits.Category, Categories.ConditionalUpdate)]
     public class ConditionalPatchTests : IClassFixture<HttpIntegrationTestFixture<Startup>>
     {
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ConditionalUpdateTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ConditionalUpdateTests.cs
index b8dbeb18..2387fcd3 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ConditionalUpdateTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ConditionalUpdateTests.cs
@@ -18,7 +18,7 @@ using Task = System.Threading.Tasks.Task;
 
 namespace Microsoft.Health.Fhir.Tests.E2E.Rest
 {
-    [HttpIntegrationFixtureArgumentSets(DataStore.All, Format.All)]
+    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.All)]
     [Trait(Traits.Category, Categories.ConditionalUpdate)]
     public class ConditionalUpdateTests : IClassFixture<HttpIntegrationTestFixture<Startup>>
     {
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ConvertDataTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ConvertDataTests.cs
index 1d4f7731..3bfd0e65 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ConvertDataTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ConvertDataTests.cs
@@ -27,7 +27,7 @@ namespace Microsoft.Health.Fhir.Tests.E2E.Rest
     /// End to end tests using default template collection only (no container registry configurations needed).
     /// </summary>
     [Trait(Traits.Category, Categories.ConvertData)]
-    [HttpIntegrationFixtureArgumentSets(DataStore.All, Format.Json)]
+    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.Json)]
     public class ConvertDataTests : IClassFixture<HttpIntegrationTestFixture>
     {
         private const string DefaultTemplateSetReference = "microsofthealth/fhirconverter:default";
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/CorsTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/CorsTests.cs
index b29cc161..814df68d 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/CorsTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/CorsTests.cs
@@ -19,7 +19,7 @@ using HttpMethod = System.Net.Http.HttpMethod;
 namespace Microsoft.Health.Fhir.Tests.E2E.Rest
 {
     [Trait(Traits.Category, Categories.Cors)]
-    [HttpIntegrationFixtureArgumentSets(DataStore.All, Format.Json)]
+    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.Json)]
     public class CorsTests : IClassFixture<HttpIntegrationTestFixture>
     {
         private readonly TestFhirClient _client;
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/CreateTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/CreateTests.cs
index 6e9bbddc..e78b751d 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/CreateTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/CreateTests.cs
@@ -23,7 +23,7 @@ using Task = System.Threading.Tasks.Task;
 
 namespace Microsoft.Health.Fhir.Tests.E2E.Rest
 {
-    [HttpIntegrationFixtureArgumentSets(DataStore.All, Format.All)]
+    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.All)]
     public class CreateTests : IClassFixture<HttpIntegrationTestFixture>
     {
         private readonly TestFhirClient _client;
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/CustomConvertDataTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/CustomConvertDataTests.cs
index 6779893f..0b0d2ec6 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/CustomConvertDataTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/CustomConvertDataTests.cs
@@ -37,7 +37,7 @@ namespace Microsoft.Health.Fhir.Tests.E2E.Rest
     /// since there is no acr emulator.
     /// </summary>
     [Trait(Traits.Category, Categories.CustomConvertData)]
-    [HttpIntegrationFixtureArgumentSets(DataStore.All, Format.Json)]
+    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.Json)]
     public class CustomConvertDataTests : IClassFixture<HttpIntegrationTestFixture>
     {
         private const string TestRepositoryName = "conversiontemplatestest";
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/CustomHeadersTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/CustomHeadersTests.cs
index 1f6c51ac..a419242d 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/CustomHeadersTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/CustomHeadersTests.cs
@@ -17,7 +17,7 @@ using Xunit;
 namespace Microsoft.Health.Fhir.Tests.E2E.Rest
 {
     [Trait(Traits.Category, Categories.CustomHeaders)]
-    [HttpIntegrationFixtureArgumentSets(DataStore.All, Format.Json)]
+    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.Json)]
     public class CustomHeadersTests : IClassFixture<HttpIntegrationTestFixture>
     {
         private readonly TestFhirClient _client;
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/DeleteTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/DeleteTests.cs
index 6a9eb860..8030c609 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/DeleteTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/DeleteTests.cs
@@ -20,7 +20,7 @@ using Task = System.Threading.Tasks.Task;
 
 namespace Microsoft.Health.Fhir.Tests.E2E.Rest
 {
-    [HttpIntegrationFixtureArgumentSets(DataStore.All, Format.All)]
+    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.All)]
     public class DeleteTests : IClassFixture<HttpIntegrationTestFixture>
     {
         private readonly HttpIntegrationTestFixture _fixture;
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/EverythingOperationTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/EverythingOperationTests.cs
index 11fcfb26..d67e0c7a 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/EverythingOperationTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/EverythingOperationTests.cs
@@ -21,7 +21,7 @@ using Task = System.Threading.Tasks.Task;
 
 namespace Microsoft.Health.Fhir.Tests.E2E.Rest
 {
-    [HttpIntegrationFixtureArgumentSets(DataStore.All, Format.All)]
+    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.All)]
     [Trait(Traits.Category, Categories.Search)]
     [Trait(Traits.Category, Categories.CompartmentSearch)]
     public class EverythingOperationTests : SearchTestsBase<EverythingOperationTestFixture>
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ExceptionTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ExceptionTests.cs
index f6724796..665e20ca 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ExceptionTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ExceptionTests.cs
@@ -19,7 +19,7 @@ using Task = System.Threading.Tasks.Task;
 
 namespace Microsoft.Health.Fhir.Tests.E2E.Rest
 {
-    [HttpIntegrationFixtureArgumentSets(DataStore.All, Format.All)]
+    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.All)]
     public class ExceptionTests : IClassFixture<HttpIntegrationTestFixture<ExceptionTests.StartupWithThrowingMiddleware>>
     {
         private readonly HttpIntegrationTestFixture<StartupWithThrowingMiddleware> _fixture;
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ExportDataValidationTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ExportDataValidationTests.cs
index dcd1addf..a4044a7e 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ExportDataValidationTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ExportDataValidationTests.cs
@@ -22,7 +22,7 @@ using Task = System.Threading.Tasks.Task;
 namespace Microsoft.Health.Fhir.Tests.E2E.Rest
 {
     [Trait(Traits.Category, Categories.ExportDataValidation)]
-    [HttpIntegrationFixtureArgumentSets(DataStore.All, Format.Json)]
+    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.Json)]
     public class ExportDataValidationTests : IClassFixture<ExportTestFixture>
     {
         private readonly TestFhirClient _testFhirClient;
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ExportLongRunningTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ExportLongRunningTests.cs
index 664049a2..971f42fb 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ExportLongRunningTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ExportLongRunningTests.cs
@@ -20,7 +20,7 @@ using Task = System.Threading.Tasks.Task;
 namespace Microsoft.Health.Fhir.Tests.E2E.Rest
 {
     [Trait(Traits.Category, Categories.ExportLongRunning)]
-    [HttpIntegrationFixtureArgumentSets(DataStore.All, Format.Json)]
+    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.Json)]
     public class ExportLongRunningTests : IClassFixture<ExportTestFixture>
     {
         private readonly TestFhirClient _testFhirClient;
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ExportTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ExportTests.cs
index b056e6f9..a4c46128 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ExportTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ExportTests.cs
@@ -21,7 +21,7 @@ using Xunit;
 namespace Microsoft.Health.Fhir.Tests.E2E.Rest
 {
     [Trait(Traits.Category, Categories.Export)]
-    [HttpIntegrationFixtureArgumentSets(DataStore.All, Format.Json)]
+    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.Json)]
     public class ExportTests : IClassFixture<HttpIntegrationTestFixture>
     {
         private readonly HttpClient _client;
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/FhirPathPatchTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/FhirPathPatchTests.cs
index 31472b23..1ea40276 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/FhirPathPatchTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/FhirPathPatchTests.cs
@@ -23,7 +23,7 @@ using Task = System.Threading.Tasks.Task;
 
 namespace Microsoft.Health.Fhir.Tests.E2E.Rest
 {
-    [HttpIntegrationFixtureArgumentSets(DataStore.All, Format.Json)]
+    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.Json)]
     public class FhirPathPatchTests : IClassFixture<HttpIntegrationTestFixture>
     {
         private readonly TestFhirClient _client;
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/HealthTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/HealthTests.cs
index 88e66fa8..d81bb2ee 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/HealthTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/HealthTests.cs
@@ -11,7 +11,7 @@ using Xunit;
 
 namespace Microsoft.Health.Fhir.Tests.E2E.Rest
 {
-    [HttpIntegrationFixtureArgumentSets(DataStore.All, Format.Json)]
+    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.Json)]
     public class HealthTests : IClassFixture<HttpIntegrationTestFixture>
     {
         private readonly HttpClient _client;
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/HistoryTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/HistoryTests.cs
index 6e21ce3d..32e61cd1 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/HistoryTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/HistoryTests.cs
@@ -34,7 +34,7 @@ namespace Microsoft.Health.Fhir.Tests.E2E.Rest
     /// hence using the NextLink to keep querying for the next set
     /// Some tests have Thread.Sleep to avoid query time to fall in future
     /// </summary>
-    [HttpIntegrationFixtureArgumentSets(DataStore.All, Format.All)]
+    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.All)]
     [CollectionDefinition("History", DisableParallelization = true)]
     [Collection("History")]
     public class HistoryTests : IClassFixture<HttpIntegrationTestFixture>, IAsyncLifetime
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Import/ImportBasicSearchTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Import/ImportBasicSearchTests.cs
index e0c391ca..95176cf2 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Import/ImportBasicSearchTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Import/ImportBasicSearchTests.cs
@@ -25,32 +25,5 @@ namespace Microsoft.Health.Fhir.Tests.E2E.Rest.Import
             _client = fixture.TestFhirClient;
             _fixture = fixture;
         }
-
-        [Fact]
-        public async Task GivenImportedResourceWithVariousValues_WhenSearchedWithMultipleParams_ThenOnlyResourcesMatchingAllSearchParamsShouldBeReturned()
-        {
-            Patient patientAddressCityAndFamily = _fixture.PatientAddressCityAndFamily;
-            string query = string.Format("Patient?address-city={0}&family={1}&_tag={2}", patientAddressCityAndFamily.Address[0].City, patientAddressCityAndFamily.Name[0].Family, _fixture.FixtureTag);
-
-            await ImportTestHelper.VerifySearchResultAsync(_fixture.TestFhirClient, query, patientAddressCityAndFamily);
-        }
-
-        [Fact]
-        public async Task GivenImportedResourceWithVariousValues_WhenSearchedWithCityParam_ThenOnlyResourcesMatchingAllSearchParamsShouldBeReturned()
-        {
-            string query = string.Format("Patient?address-city={0}&_tag={1}", _fixture.PatientWithSameCity1.Address[0].City, _fixture.FixtureTag);
-
-            await ImportTestHelper.VerifySearchResultAsync(_fixture.TestFhirClient, query, _fixture.PatientWithSameCity1, _fixture.PatientWithSameCity2);
-        }
-
-        [Fact]
-        public async Task GivenImportedResourceWithVariousValues_WhenSearchedWithTheMissingModifer_ThenOnlyTheResourcesWithMissingOrPresentParametersAreReturned()
-        {
-            string queryMissingFalse = string.Format("Patient?gender:missing=false&_tag={0}", _fixture.FixtureTag);
-            await ImportTestHelper.VerifySearchResultAsync(_fixture.TestFhirClient, queryMissingFalse, _fixture.PatientWithGender);
-
-            string queryMissing = string.Format("Patient?gender:missing=true&_tag={0}", _fixture.FixtureTag);
-            await ImportTestHelper.VerifySearchResultAsync(_fixture.TestFhirClient, queryMissing, _fixture.PatientAddressCityAndFamily, _fixture.PatientWithSameCity1, _fixture.PatientWithSameCity2);
-        }
     }
 }
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Import/ImportCompositeSearchTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Import/ImportCompositeSearchTests.cs
index b6538bbc..3cd10f7b 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Import/ImportCompositeSearchTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Import/ImportCompositeSearchTests.cs
@@ -40,82 +40,6 @@ namespace Microsoft.Health.Fhir.Tests.E2E.Rest.Import
             _fixture = fixture;
         }
 
-        [Theory]
-        [InlineData("code-value-quantity=http://snomed.info/sct|443849008$10|http://unitsofmeasure.org|{score}", ObservationWith20MinuteApgarScore)]
-        [InlineData("code-value-quantity=443849008$10|http://unitsofmeasure.org|{score}", ObservationWith20MinuteApgarScore)]
-        [InlineData("code-value-quantity=http://snomed.info/sct|443849008$10", ObservationWith20MinuteApgarScore)]
-        [InlineData("code-value-quantity=http://snomed.info/sct|443849008$10||{score}", ObservationWith20MinuteApgarScore)]
-        [InlineData("code-value-quantity=http://snomed.info/sct|443849008$eq10|http://unitsofmeasure.org|{score}", ObservationWith20MinuteApgarScore)]
-        [InlineData("code-value-quantity=http://snomed.info/sct|443849008$ne10|http://unitsofmeasure.org|{score}")]
-        [InlineData("code-value-quantity=http://snomed.info/sct|443849008$lt10|http://unitsofmeasure.org|{score}")]
-        [InlineData("code-value-quantity=http://snomed.info/sct|443849008$le10|http://unitsofmeasure.org|{score}", ObservationWith20MinuteApgarScore)]
-        [InlineData("code-value-quantity=http://snomed.info/sct|443849008$gt10|http://unitsofmeasure.org|{score}")]
-        [InlineData("code-value-quantity=http://snomed.info/sct|443849008$ge10|http://unitsofmeasure.org|{score}", ObservationWith20MinuteApgarScore)]
-        [InlineData("code-value-quantity=http://loinc.org|8310-5$39|http://unitsofmeasure.org|Cel", ObservationWithTemperature)]
-        [InlineData("code-value-quantity=http://loinc.org|8331-1$39|http://unitsofmeasure.org|Cel", ObservationWithTemperature)]
-        [InlineData("code-value-quantity=http://snomed.info/sct|56342008$39|http://unitsofmeasure.org|Cel", ObservationWithTemperature)]
-        [InlineData("combo-code-value-quantity=http://loinc.org|9272-6$0|http://unitsofmeasure.org|{score}", ObservationWith1MinuteApgarScore)] // Match: Observation.code against Observation.valueQuantity
-        [InlineData("combo-code-value-quantity=http://snomed.info/sct|169895004$0|http://unitsofmeasure.org|{score}", ObservationWith1MinuteApgarScore)] // Match: Observation.code against Observation.valueQuantity
-        [InlineData("combo-code-value-quantity=85354-9$107")] // Not match: Observation.code against Observation.component[0].valueQuantity
-        [InlineData("combo-code-value-quantity=8480-6$107", ObservationWithBloodPressure)] // Match: Observation.component[0].code against Observation.component[0].valueQuantity
-        [InlineData("combo-code-value-quantity=8480-6$60")] // Not match: Observation.component[0].code against Observation.component[1].valueQuantity
-        [InlineData("code-value-quantity=unknownSystem|443849008$10")]
-        [InlineData("code-value-quantity=http://snomed.info/sct|443849008$eq10|unknownSystem|{score}")]
-        [InlineData("code-value-quantity=http://snomed.info/sct|443849008$eq10|http://unitsofmeasure.org|unknownQuantityId")]
-        [InlineData("code-value-quantity=http://loinc.org|8310-5$39|http://unitsofmeasure.org|Cel,http://snomed.info/sct|443849008$10|http://unitsofmeasure.org|{score}", ObservationWith20MinuteApgarScore, ObservationWithTemperature)]
-        [InlineData("code-value-quantity=http://loinc.org|8310-5$gt36.6|http://unitsofmeasure.org|Cel,http://loinc.org|9272-6$0|http://unitsofmeasure.org|{score}", ObservationWith1MinuteApgarScore, ObservationWithTemperature)]
-        public async Task GivenACompositeSearchParameterWithTokenAndQuantity_WhenSearchedForImportedResources_ThenCorrectBundleShouldBeReturned(string queryValue, params string[] expectedObservationNames)
-        {
-            await SearchAndValidateObservations(queryValue, expectedObservationNames);
-        }
-
-        [Theory]
-        [InlineData("code-value-string=http://snomed.info/sct|162806009$blue", ObservationWithEyeColor)]
-        [InlineData("code-value-string=162806009$blue", ObservationWithEyeColor)]
-        [InlineData("code-value-string=162806009$Lorem", ObservationWithLongEyeColor)]
-        [InlineData("code-value-string=162806009$" + StringSearchTestFixture.LongString, ObservationWithLongEyeColor)]
-        [InlineData("code-value-string=162806009$" + StringSearchTestFixture.LongString + "Not")]
-        [InlineData("code-value-string=http://snomed.info/sct|$blue", ObservationWithEyeColor)]
-        [InlineData("code-value-string=http://snomed.info/sct|162806009$red")]
-        [InlineData("code-value-string=162806009$Lorem,162806009$blue", ObservationWithLongEyeColor, ObservationWithEyeColor)]
-        public async Task GivenACompositeSearchParameterWithTokenAndString_WhenSearchedForImportedResources_ThenCorrectBundleShouldBeReturned(string queryValue, params string[] expectedObservationNames)
-        {
-            await SearchAndValidateObservations(queryValue, expectedObservationNames);
-        }
-
-        [Theory]
-        [InlineData("relationship=DocumentReference/example-appends$http://hl7.org/fhir/document-relationship-type|appends", DocumentReferenceExample)]
-        [InlineData("relationship=DocumentReference/example-appends$appends", DocumentReferenceExample)]
-        [InlineData("relationship=DocumentReference/example-appends$replaces")]
-        [InlineData("relationship=DocumentReference/example-replaces$replaces", DocumentReferenceExample002)]
-        [InlineData("relationship=DocumentReference/example-appends$appends,DocumentReference/example-replaces$replaces", DocumentReferenceExample, DocumentReferenceExample002, Skip = "https://github.com/microsoft/fhir-server/issues/523")]
-        [InlineData("relationship=DocumentReference/example-appends,DocumentReference/example-replaces$replaces", DocumentReferenceExample, DocumentReferenceExample002, Skip = "https://github.com/microsoft/fhir-server/issues/523")]
-        public async Task GivenACompositeSearchParameterWithTokenAndReference_WhenSearchedForImportedResources_ThenCorrectBundleShouldBeReturned(string queryValue, params string[] expectedDocumentReferenceNames)
-        {
-            await SearchAndValidateDocumentReferences(queryValue, expectedDocumentReferenceNames);
-        }
-
-        [Theory]
-        [InlineData("combo-code-value-concept=http://snomed.info/sct|443849008$http://loinc.org/la|LA6724-4")] // Not match: Observation.code against Observation.component[0].valueCodeableConcept.coding[0]
-        [InlineData("combo-code-value-concept=443849008$http://loinc.org/la|LA6724-4")] // Not match: Observation.code (without system) against Observation.component[0].valueCodeableConcept.coding[0]
-        [InlineData("combo-code-value-concept=http://snomed.info/sct|443849008$LA6724-4")] // Not match: Observation.code against Observation.component[0].valueCodeableConcept.coding[0] (without system)
-        [InlineData("combo-code-value-concept=443849008$LA6724-4")] // Not match: Observation.code (without system) against Observation.component[0].valueCodeableConcept.coding[0] (without system)
-        [InlineData("combo-code-value-concept=|443849008$http://loinc.org/la|LA6724-4")] // Not match: Observation.code (with explicit no system) against Observation.component[0].valueCodeableConcept
-        [InlineData("combo-code-value-concept=http://snomed.info/sct|443849008$|LA6724-4")] // Not match: Observation.code against Observation.component[0].valueCodeableConcept.coding[0] (with explicit no system)
-        [InlineData("combo-code-value-concept=http://snomed.info/sct|443849008$http://snomed.info/sct|443849008")] // Not match: Observation.code against Observation.code
-        [InlineData("combo-code-value-concept=http://snomed.info/sct|443849008$http://snomed.info/sct|249227004")] // Not match: Observation.code against Observation.component[0].code
-        [InlineData("combo-code-value-concept=http://snomed.info/sct|443849008$http:/acme.ped/apgarcolor|2")] // Not match: Observation.code against Observation.component[0].valueCodeableConcept.coding[1]
-        [InlineData("combo-code-value-concept=http://snomed.info/sct|249227004$http://loinc.org/la|LA6724-4", ObservationWith20MinuteApgarScore)] // Match: Observation.component[0].code against Observation.component[0].valueCodeableConcept.coding[0]
-        [InlineData("combo-code-value-concept=http://snomed.info/sct|249227004$http:/acme.ped/apgarcolor|2", ObservationWith20MinuteApgarScore)] // Match: Observation.component[1].code against Observation.component[0].valueCodeableConcept.coding[1]
-        [InlineData("combo-code-value-concept=http://loinc.org/la|LA6724-4$http:/acme.ped/apgarcolor|2")] // Not match: Observation.component[0].valueCodeableConcept.coding[0] against Observation.component[0].valueCodeableConcept.coding[1]
-        [InlineData("combo-code-value-concept=169895004$http://loinc.org/la|LA6725-1")] // Not match: Observation.code[1] against Observation.component[4].valueCodeableConcept.coding[0]
-        [InlineData("combo-code-value-concept=http://snomed.info/sct|249227004$http://loinc.org/la|LA6722-8", ObservationWith1MinuteApgarScore)] // Match: Observation.component[0].code against Observation.component[0].valueCodeableConcept.coding[0]
-        [InlineData("combo-code-value-concept=http://snomed.info/sct|249227004$http://loinc.org/la|LA6722-8,http://snomed.info/sct|249227004$http://loinc.org/la|LA6724-4", ObservationWith20MinuteApgarScore, ObservationWith1MinuteApgarScore)]
-        public async Task GivenACompositeSearchParameterWithTokenAndToken_WhenSearchedForImportedResources_ThenCorrectBundleShouldBeReturned(string queryValue, params string[] expectedObservationNames)
-        {
-            await SearchAndValidateObservations(queryValue, expectedObservationNames);
-        }
-
         private async Task SearchAndValidateObservations(string queryValue, string[] expectedObservationNames)
         {
             Bundle bundle = await SearchAsync(ResourceType.Observation, queryValue);
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Import/ImportDateSearchTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Import/ImportDateSearchTests.cs
index 44306adb..fa22ed96 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Import/ImportDateSearchTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Import/ImportDateSearchTests.cs
@@ -26,137 +26,5 @@ namespace Microsoft.Health.Fhir.Tests.E2E.Rest.Import
             _client = fixture.TestFhirClient;
             _fixture = fixture;
         }
-
-        // http://hl7.org/fhir/search.html#prefix
-        // eq: the range of the search value has to fully contains the range of the target value.
-        // ne: the range of the search value does not fully contain the range of the target value.
-        // gt: the range above the search value intersects (i.e. overlaps) with the range of the target value.
-        // lt: the range below the search value intersects (i.e. overlaps) with the range of the target value.
-        // le: the range below the search value intersects (i.e. overlaps) with the range of the target value or the range of the search value fully contains the range of the target value.
-        // ge: the range above the search value intersects (i.e. overlaps) with the range of the target value, or the range of the search value fully contains the range of the target value.
-        // sa: the range of the search value does not overlap with the range of the target value, and the range above the search value contains the range of the target value.
-        // eb: the range of the search value does overlap not with the range of the target value, and the range below the search value contains the range of the target value.
-        [Theory]
-        [InlineData("1980", 1, 2, 3, 4, 5)] // Any dates with start time greater than or equal to 1980-01-01T00:00:00.0000000 and end time less than or equal to 1980-12-31T23:59:59.9999999.
-        [InlineData("1980-01")] // Any dates with start time greater than or equal to 1980-01-01T00:00:00.0000000 and end time less than or equal to 1980-01-31T23:59:59.9999999.
-        [InlineData("1980-05", 2, 3, 4, 5)] // Any dates with start time greater than or equal to 1980-05-01T00:00:00.0000000 and end time less than or equal to 1980-05-31T23:59:59.9999999.
-        [InlineData("1980-05-10")] // Any dates with start time greater than or equal to 1980-05-10T00:00:00.0000000 and end time less than or equal to 1980-05-10T23:59:59.9999999.
-        [InlineData("1980-05-11", 3, 4, 5)] // Any dates with start time greater than or equal to 1980-05-11T00:00:00.0000000 and end time less than or equal to 1980-05-11T23:59:59.9999999.
-        [InlineData("1980-05-11T16:32:15", 4, 5)] // Any dates with start time greater than or equal to 1980-05-11T16:32:15.0000000 and end time less than or equal to 1980-05-11T16:32:15.9999999.
-        [InlineData("1980-05-11T16:32:15.500", 5)] // Any dates with start time greater than or equal to 1980-05-11T16:32:30.5000000 and end time less than or equal to 1980-05-11T16:32:30.50000000.
-        [InlineData("1980-05-11T16:32:15.5000000", 5)] // Any dates with start time greater than or equal to 1980-05-11T16:32:30.5000000 and end time less than or equal to 1980-05-11T16:32:30.50000000.
-        [InlineData("1980-05-11T16:32:15.5000001")] // Any dates with start time greater than or equal to 1980-05-11T16:32:30.50000001 and end time less than or equal to 1980-05-11T16:32:30.50000001.
-        [InlineData("1980-05-11T16:32:30")] // Any dates with start time greater than or equal to 1980-05-11T16:32:30.0000000 and end time less than or equal to 1980-05-11T16:32:30.9999999.
-        [InlineData("ne1980", 0, 6)] // Any dates with start time less than 1980-01-01T00:00:00.0000000 or end time greater than 1980-12-31T23:59:59.9999999.
-        [InlineData("ne1980-01", 0, 1, 2, 3, 4, 5, 6)] // Any dates with start time less than 1980-01-01T00:00:00.0000000 or end time greater than 1980-01-31T23:59:59.9999999.
-        [InlineData("ne1980-05", 0, 1, 6)] // Any dates with start time less than 1980-05-01T00:00:00.0000000 or end time greater than 1980-05-31T23:59:59.9999999.
-        [InlineData("ne1980-05-10", 0, 1, 2, 3, 4, 5, 6)] // Any dates with start time less than 1980-05-10T00:00:00.0000000 or end time greater than 1980-05-10T23:59:59.9999999.
-        [InlineData("ne1980-05-11", 0, 1, 2, 6)] // Any dates with start time less than 1980-05-11T00:00:00.0000000 or end time greater than 1980-05-11T23:59:59.9999999.
-        [InlineData("ne1980-05-11T16:32:15", 0, 1, 2, 3, 6)] // Any dates with start time less than 1980-05-11T16:32:15.0000000 or end time greater than 1980-05-11T16:32:15.9999999.
-        [InlineData("ne1980-05-11T16:32:15.500", 0, 1, 2, 3, 4, 6)] // Any dates with start time less than 1980-05-11T16:32:15.5000000 or end time greater than 1980-05-11T16:32:15.5000000.
-        [InlineData("ne1980-05-11T16:32:15.5000000", 0, 1, 2, 3, 4, 6)] // Any dates with start time less than 1980-05-11T16:32:15.5000000 or end time greater than 1980-05-11T16:32:15.5000000.
-        [InlineData("ne1980-05-11T16:32:15.5000001", 0, 1, 2, 3, 4, 5, 6)] // Any dates with start time less than 1980-05-11T16:32:15.5000001 or end time greater than 1980-05-11T16:32:15.5000001.
-        [InlineData("ne1980-05-11T16:32:30", 0, 1, 2, 3, 4, 5, 6)] // Any dates with start time less than 1980-05-11T16:32:30.0000000 or end time greater than 1980-05-11T16:32:30.9999999.
-        [InlineData("lt1980", 0)] // Only dates with start time earlier than 1980-01-01T00:00:00.0000000 would match.
-        [InlineData("lt1980-04", 0, 1)] // Only dates with start time earlier than 1980-04-01T00:00:00.0000000 would match.
-        [InlineData("lt1980-05", 0, 1)] // Only dates with start time earlier than 1980-05-01T00:00:00.0000000 would match.
-        [InlineData("lt1980-05-10", 0, 1, 2)] // Only dates with start time earlier than 1980-05-10T00:00:00.0000000 would match.
-        [InlineData("lt1980-05-11", 0, 1, 2)] // Only dates with start time earlier than 1980-05-11T00:00:00.0000000 would match.
-        [InlineData("lt1980-05-11T16:32:14", 0, 1, 2, 3)] // Only dates with start time earlier than 1980-05-11T16:32:14.0000000 would match.
-        [InlineData("lt1980-05-11T16:32:15", 0, 1, 2, 3)] // Only dates with start time earlier than 1980-05-11T16:32:15.0000000 would match.
-        [InlineData("lt1980-05-11T16:32:15.4999999", 0, 1, 2, 3, 4)] // Only dates with start time earlier than 1980-05-11T16:32:15.49999999 would match.
-        [InlineData("lt1980-05-11T16:32:15.500", 0, 1, 2, 3, 4)] // Only dates with start time earlier than 1980-05-11T16:32:15.5000000 would match.
-        [InlineData("lt1980-05-11T16:32:15.5000000", 0, 1, 2, 3, 4)] // Only dates with start time earlier than 1980-05-11T16:32:15.5000000 would match.
-        [InlineData("lt1980-05-11T16:32:15.5000001", 0, 1, 2, 3, 4, 5)] // Only dates with start time earlier than 1980-05-11T16:32:15.5000001 would match.
-        [InlineData("lt1980-05-11T16:32:16", 0, 1, 2, 3, 4, 5)] // Only dates with start time earlier than 1980-05-11T16:32:16.0000000 would match.
-        [InlineData("lt1980-05-12", 0, 1, 2, 3, 4, 5)] // Only dates with start time earlier than 1980-05-12T00:00:00.0000000 would match.
-        [InlineData("lt1980-06", 0, 1, 2, 3, 4, 5)] // Only dates with start time earlier than 1980-06-01T00:00:00.0000000 would match.
-        [InlineData("lt1981", 0, 1, 2, 3, 4, 5)] // Only dates with start time earlier than 1981-01-01T00:00:00.0000000 would match.
-        [InlineData("lt1981-01-01T00:00:00.0000001", 0, 1, 2, 3, 4, 5, 6)] // Only dates with start time earlier than 1981-01-01T00:00:00.0000001 would match.
-        [InlineData("gt1979-12-31T23:59:59.9999999", 1, 2, 3, 4, 5, 6)] // Only dates with end time later than 1979-12-31T23:59:59.9999999 would match.
-        [InlineData("gt1980", 6)] // Only dates with end time later than 1980-12-31T23:59:59.9999999 would match.
-        [InlineData("gt1980-04", 1, 2, 3, 4, 5, 6)] // Only dates with end time later than 1980-04-30T23:59:59.9999999 would match.
-        [InlineData("gt1980-05", 1, 6)] // Only dates with end time later than 1980-05-31T23:59:59.9999999 would match.
-        [InlineData("gt1980-05-11", 1, 2, 6)] // Only dates with end time later than 1980-05-11T23:59:59.9999999 would match.
-        [InlineData("gt1980-05-11T16:32:14", 1, 2, 3, 4, 5, 6)] // Only dates with end time later than 1980-05-11T16:32:14.9999999 would match.
-        [InlineData("gt1980-05-11T16:32:15", 1, 2, 3, 6)] // Only dates with end time later than 1980-05-11T16:32:15.9999999 would match.
-        [InlineData("gt1980-05-11T16:32:15.4999999", 1, 2, 3, 4, 5, 6)] // Only dates with end time later than 1980-05-11T16:32:15.4999999 would match.
-        [InlineData("gt1980-05-11T16:32:15.500", 1, 2, 3, 4, 6)] // Only dates with end time later than 1980-05-11T16:32:15.5000000 would match.
-        [InlineData("gt1980-05-11T16:32:15.5000000", 1, 2, 3, 4, 6)] // Only dates with end time later than 1980-05-11T16:32:15.5000000 would match.
-        [InlineData("gt1980-05-11T16:32:15.5000001", 1, 2, 3, 4, 6)] // Only dates with end time later than 1980-05-11T16:32:15.5000001 would match.
-        [InlineData("gt1980-05-11T16:32:16", 1, 2, 3, 6)] // Only dates with end time later than 1980-05-11T16:32:16.9999999 would match.
-        [InlineData("gt1980-05-12", 1, 2, 6)] // Only dates with end time later than 1980-05-12T23:59:59.9999999 would match.
-        [InlineData("gt1980-06", 1, 6)] // Only dates with end time later than 1980-06-01T23:59:59.9999999 would match.
-        [InlineData("gt1981-01-01T00:00:00.0000001", 6)] // Only dates with end time later than 1981-01-01T00:00:00.0000001 would match.
-        [InlineData("le1980", 0, 1, 2, 3, 4, 5)] // Only dates with start time earlier than or equal to 1980-12-31T23:59:59.9999999 would match.
-        [InlineData("le1980-04", 0, 1)] // Only dates with start time earlier than or equal to 1980-04-30T23:59:59.9999999 would match.
-        [InlineData("le1980-05", 0, 1, 2, 3, 4, 5)] // Only dates with start time earlier than or equal to 1980-05-31T23:59:59.9999999 would match.
-        [InlineData("le1980-05-10", 0, 1, 2)] // Only dates with start time earlier than or equal to 1980-05-10T23:59:59.9999999 would match.
-        [InlineData("le1980-05-11", 0, 1, 2, 3, 4, 5)] // Only dates with start time earlier than or equal to 1980-05-11T23:59:59.9999999 would match.
-        [InlineData("le1980-05-11T16:32:14", 0, 1, 2, 3)] // Only dates with start time earlier than or equal to 1980-05-11T16:32:14.9999999 would match.
-        [InlineData("le1980-05-11T16:32:15", 0, 1, 2, 3, 4, 5)] // Only dates with start time earlier than or equal to 1980-05-11T16:32:15.9999999 would match.
-        [InlineData("le1980-05-11T16:32:15.4999999", 0, 1, 2, 3, 4)] // Only dates with start time earlier than or equal to 1980-05-11T16:32:15.49999999 would match.
-        [InlineData("le1980-05-11T16:32:15.500", 0, 1, 2, 3, 4, 5)] // Only dates with start time earlier than or equal to 1980-05-11T16:32:15.5000000 would match.
-        [InlineData("le1980-05-11T16:32:15.5000000", 0, 1, 2, 3, 4, 5)] // Only dates with start time earlier than or equal to 1980-05-11T16:32:15.5000000 would match.
-        [InlineData("le1980-05-11T16:32:15.5000001", 0, 1, 2, 3, 4, 5)] // Only dates with start time earlier than or equal to 1980-05-11T16:32:15.5000001 would match.
-        [InlineData("le1980-05-11T16:32:16", 0, 1, 2, 3, 4, 5)] // Only dates with start time earlier than or equal to 1980-05-11T16:32:16.9999999 would match.
-        [InlineData("le1980-05-12", 0, 1, 2, 3, 4, 5)] // Only dates with start time earlier than or equal to 1980-05-12T23:59:59.9999999 would match.
-        [InlineData("le1980-06", 0, 1, 2, 3, 4, 5)] // Only dates with start time earlier than or equal to 1980-06-30T23:59:59.9999999 would match.
-        [InlineData("le1981", 0, 1, 2, 3, 4, 5, 6)] // Only dates with start time earlier than or equal to 1981-12-31T23:59:59.9999999 would match.
-        [InlineData("le1981-01-01T00:00:00.0000001", 0, 1, 2, 3, 4, 5, 6)] // Only dates with start time earlier than or equal to 1981-01-01T00:00:00.0000001 would match.
-        [InlineData("ge1979-12-31T23:59:59.9999999", 0, 1, 2, 3, 4, 5, 6)] // Only dates with end time later than or equal to 1979-12-31T23:59:59.9999999 would match.
-        [InlineData("ge1980", 1, 2, 3, 4, 5, 6)] // Only dates with end time later than or equal to 1980-01-01T00:00:00.0000000 would match.
-        [InlineData("ge1980-04", 1, 2, 3, 4, 5, 6)] // Only dates with end time later than or equal to 1980-04-01T00:00:00.0000000 would match.
-        [InlineData("ge1980-05", 1, 2, 3, 4, 5, 6)] // Only dates with end time later than or equal to 1980-05-01T00:00:00.0000000 would match.
-        [InlineData("ge1980-05-11", 1, 2, 3, 4, 5, 6)] // Only dates with end time later than or equal to 1980-05-11T00:00:00.0000000 would match.
-        [InlineData("ge1980-05-11T16:32:14", 1, 2, 3, 4, 5, 6)] // Only dates with end time later than or equal to 1980-05-11T16:32:14.0000000 would match.
-        [InlineData("ge1980-05-11T16:32:15", 1, 2, 3, 4, 5, 6)] // Only dates with end time later than or equal to 1980-05-11T16:32:15.0000000 would match.
-        [InlineData("ge1980-05-11T16:32:15.4999999", 1, 2, 3, 4, 5, 6)] // Only dates with end time later than or equal to 1980-05-11T16:32:15.4999999 would match.
-        [InlineData("ge1980-05-11T16:32:15.500", 1, 2, 3, 4, 5, 6)] // Only dates with end time later than or equal to 1980-05-11T16:32:15.5000000 would match.
-        [InlineData("ge1980-05-11T16:32:15.5000000", 1, 2, 3, 4, 5, 6)] // Only dates with end time later than or equal to 1980-05-11T16:32:15.5000000 would match.
-        [InlineData("ge1980-05-11T16:32:15.5000001", 1, 2, 3, 4, 6)] // Only dates with end time later than or equal to 1980-05-11T16:32:15.5000001 would match.
-        [InlineData("ge1980-05-11T16:32:16", 1, 2, 3, 6)] // Only dates with end time later than 1980-05-11T16:32:16.0000000 would match.
-        [InlineData("ge1980-05-12", 1, 2, 6)] // Only dates with end time later than or equal to 1980-05-12T00:00:00.0000000 would match.
-        [InlineData("ge1980-06", 1, 6)] // Only dates with end time later than or equal to 1980-06-01T00:00:00.0000000 would match.
-        [InlineData("ge1981-01-01T00:00:00.0000001", 6)] // Only dates with end time later than or equal to 1981-01-01T00:00:00.0000001 would match.
-        [InlineData("sa1980", 6)] // Only dates with start time later than 1981-12-31T23:59:59.9999999 would match.
-        [InlineData("sa1980-04", 2, 3, 4, 5, 6)] // Only dates with start time later than 1980-04-30T23:59:59.9999999 would match.
-        [InlineData("sa1980-05", 6)] // Only dates with start time later than 1980-05-31T23:59:59.9999999 would match.
-        [InlineData("sa1980-05-10", 3, 4, 5, 6)] // Only dates with start time later than 1980-05-10T23:59:59.9999999 would match.
-        [InlineData("sa1980-05-11", 6)] // Only dates with start time later than 1980-05-11T23:59:59.9999999 would match.
-        [InlineData("sa1980-05-11T16:32:14", 4, 5, 6)] // Only dates with start time later than 1980-05-11T16:32:14.9999999 would match.
-        [InlineData("sa1980-05-11T16:32:15", 6)] // Only dates with start time later than 1980-05-11T16:32:15.9999999 would match.
-        [InlineData("sa1980-05-11T16:32:15.4999999", 5, 6)] // Only dates with start time later than 1980-05-11T16:32:15.49999999 would match.
-        [InlineData("sa1980-05-11T16:32:15.500", 6)] // Only dates with start time later than 1980-05-11T16:32:15.5000000 would match.
-        [InlineData("sa1980-05-11T16:32:15.5000000", 6)] // Only dates with start time later than 1980-05-11T16:32:15.5000000 would match.
-        [InlineData("sa1980-05-11T16:32:15.5000001", 6)] // Only dates with start time later than 1980-05-11T16:32:15.5000001 would match.
-        [InlineData("sa1980-05-11T16:32:16", 6)] // Only dates with start time later than 1980-05-11T16:32:16.9999999 would match.
-        [InlineData("sa1980-05-12", 6)] // Only dates with start time later than 1980-05-12T23:59:59.9999999 would match.
-        [InlineData("sa1980-06", 6)] // Only dates with start time later than 1980-06-30T23:59:59.9999999 would match.
-        [InlineData("sa1981")] // Only dates with start time later than 1981-12-31T23:59:59.9999999 would match.
-        [InlineData("sa1981-01-01T00:00:00.0000001")] // Only dates with start time later than 1981-01-01T00:00:00.0000001 would match.
-        [InlineData("eb1979-12-31T23:59:59.9999999")] // Only dates with end time earlier than 1979-12-31T23:59:59.9999999 would match.
-        [InlineData("eb1980", 0)] // Only dates with end time earlier than 1980-01-01T00:00:00.0000000 would match.
-        [InlineData("eb1980-04", 0)] // Only dates with end time earlier than 1980-04-01T00:00:00.0000000 would match.
-        [InlineData("eb1980-05", 0)] // Only dates with end time earlier than 1980-05-01T00:00:00.0000000 would match.
-        [InlineData("eb1980-05-11", 0)] // Only dates with end time earlier than 1980-05-11T00:00:00.0000000 would match.
-        [InlineData("eb1980-05-11T16:32:14", 0)] // Only dates with end time earlier than 1980-05-11T16:32:14.0000000 would match.
-        [InlineData("eb1980-05-11T16:32:15", 0)] // Only dates with end time earlier than 1980-05-11T16:32:15.0000000 would match.
-        [InlineData("eb1980-05-11T16:32:15.4999999", 0)] // Only dates with end time earlier than 1980-05-11T16:32:15.4999999 would match.
-        [InlineData("eb1980-05-11T16:32:15.500", 0)] // Only dates with end time earlier than 1980-05-11T16:32:15.5000000 would match.
-        [InlineData("eb1980-05-11T16:32:15.5000000", 0)] // Only dates with end time earlier than 1980-05-11T16:32:15.5000000 would match.
-        [InlineData("eb1980-05-11T16:32:15.5000001", 0, 5)] // Only dates with end time earlier than 1980-05-11T16:32:15.5000001 would match.
-        [InlineData("eb1980-05-11T16:32:16", 0, 4, 5)] // Only dates with end time later than 1980-05-11T16:32:16.0000000 would match.
-        [InlineData("eb1980-05-12", 0, 3, 4, 5)] // Only dates with end time earlier than 1980-05-12T00:00:00.0000000 would match.
-        [InlineData("eb1980-06", 0, 2, 3, 4, 5)] // Only dates with end time earlier than 1980-06-01T00:00:00.0000000 would match.
-        [InlineData("eb1981-01-01T00:00:00.0000001", 0, 1, 2, 3, 4, 5)] // Only dates with end time earlier than 1981-01-01T00:00:00.0000001 would match.
-        public async Task GivenADateTimeSearchParam_WhenSearched_ThenCorrectBundleShouldBeReturned(string queryValue, params int[] expectedIndices)
-        {
-            Bundle bundle = await _client.SearchAsync(ResourceType.Observation, $"date={queryValue}&_tag={_fixture.FixtureTag}");
-
-            Observation[] expected = expectedIndices.Select(i => _fixture.Observations[i]).ToArray();
-
-            ImportTestHelper.VerifyBundle(bundle, expected);
-        }
     }
 }
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Import/ImportNumberSearchTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Import/ImportNumberSearchTests.cs
index 5be1fe2c..19c147e9 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Import/ImportNumberSearchTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Import/ImportNumberSearchTests.cs
@@ -26,43 +26,5 @@ namespace Microsoft.Health.Fhir.Tests.E2E.Rest.Import
             _client = fixture.TestFhirClient;
             _fixture = fixture;
         }
-
-        [Theory]
-        [InlineData("3")]
-        [InlineData("5", 2)]
-        [InlineData("5.000", 2)]
-        [InlineData("eq3")]
-        [InlineData("eq5", 2)]
-        [InlineData("eq5.000", 2)]
-        [InlineData("ne5", 0, 1, 3, 4)]
-        [InlineData("ne5.000", 0, 1, 3, 4)]
-        [InlineData("lt4.9", 0, 1)]
-        [InlineData("lt5", 0, 1)]
-        [InlineData("lt5.000", 0, 1)]
-        [InlineData("lt5.01", 0, 1, 2)]
-        [InlineData("gt4.9", 2, 3, 4)]
-        [InlineData("gt5", 3, 4)]
-        [InlineData("gt5.000", 3, 4)]
-        [InlineData("gt5.1", 3, 4)]
-        [InlineData("le4.9", 0, 1)]
-        [InlineData("le5", 0, 1, 2)]
-        [InlineData("le5.000", 0, 1, 2)]
-        [InlineData("le5.0001", 0, 1, 2)]
-        [InlineData("ge4.9999", 2, 3, 4)]
-        [InlineData("ge5", 2, 3, 4)]
-        [InlineData("ge5.000", 2, 3, 4)]
-        [InlineData("ge5.001", 3, 4)]
-        [InlineData("sa4.9999", 2, 3, 4)]
-        [InlineData("sa5", 3, 4)]
-        [InlineData("eb5", 0, 1)]
-        [InlineData("eb5.0001", 0, 1, 2)]
-        public async Task GivenANumberSearchParam_WhenSearched_ThenCorrectBundleShouldBeReturned(string queryValue, params int[] expectedIndices)
-        {
-            Bundle bundle = await _client.SearchAsync(ResourceType.RiskAssessment, $"probability={queryValue}&_tag={_fixture.FixtureTag}");
-
-            RiskAssessment[] expected = expectedIndices.Select(i => _fixture.RiskAssessments[i]).ToArray();
-
-            ImportTestHelper.VerifyBundle(bundle, expected);
-        }
     }
 }
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Import/ImportQuantitySearchTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Import/ImportQuantitySearchTests.cs
index 87970a42..3499820e 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Import/ImportQuantitySearchTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Import/ImportQuantitySearchTests.cs
@@ -26,148 +26,5 @@ namespace Microsoft.Health.Fhir.Tests.E2E.Rest.Import
             _client = fixture.TestFhirClient;
             _fixture = fixture;
         }
-
-        [Theory]
-        [InlineData("30")]
-        [InlineData("0.002", 0)]
-        [InlineData("2e-3", 0)]
-        [InlineData("2E-3", 0)]
-        [InlineData("5", 4, 5)]
-        [InlineData("5.000", 4, 5)]
-        [InlineData("eq30")]
-        [InlineData("eq2e-3", 0)]
-        [InlineData("eq2E-3", 0)]
-        [InlineData("eq5", 4, 5)]
-        [InlineData("eq5.000", 4, 5)]
-        [InlineData("ne5", 0, 1, 2, 3, 6, 7, 8)]
-        [InlineData("ne5.000", 0, 1, 2, 3, 6, 7, 8)]
-        [InlineData("lt4.9", 0, 1, 2, 3)]
-        [InlineData("lt5", 0, 1, 2, 3)]
-        [InlineData("lt5.000", 0, 1, 2, 3)]
-        [InlineData("lt5.01", 0, 1, 2, 3, 4, 5)]
-        [InlineData("gt4.9", 4, 5, 6, 7, 8)]
-        [InlineData("gt5", 6, 7, 8)]
-        [InlineData("gt5.000", 6, 7, 8)]
-        [InlineData("gt5.1", 6, 7, 8)]
-        [InlineData("le4.9", 0, 1, 2, 3)]
-        [InlineData("le5", 0, 1, 2, 3, 4, 5)]
-        [InlineData("le5.000", 0, 1, 2, 3, 4, 5)]
-        [InlineData("le5.0001", 0, 1, 2, 3, 4, 5)]
-        [InlineData("ge4.9999", 4, 5, 6, 7, 8)]
-        [InlineData("ge5", 4, 5, 6, 7, 8)]
-        [InlineData("ge5.000", 4, 5, 6, 7, 8)]
-        [InlineData("ge5.001", 6, 7, 8)]
-        [InlineData("sa4.9999", 4, 5, 6, 7, 8)]
-        [InlineData("sa5", 6, 7, 8)]
-        [InlineData("eb5", 0, 1, 2, 3)]
-        [InlineData("eb5.0001", 0, 1, 2, 3, 4, 5)]
-        [InlineData("30|system1")]
-        [InlineData("5|system1", 4)]
-        [InlineData("5.000|system1", 4)]
-        [InlineData("eq30|system1")]
-        [InlineData("eq5|system1", 4)]
-        [InlineData("eq5.000|system1", 4)]
-        [InlineData("ne2e-3", 1, 2, 3, 4, 5, 6, 7, 8)]
-        [InlineData("ne5|system1", 0, 1, 3, 7, 8)]
-        [InlineData("ne5.000|system1", 0, 1, 3, 7, 8)]
-        [InlineData("lt3e-3|system1", 0)]
-        [InlineData("lt4E-2", 0)]
-        [InlineData("lt4.9|system1", 0, 1, 3)]
-        [InlineData("lt5|system1", 0, 1, 3)]
-        [InlineData("lt5.000|system1", 0, 1, 3)]
-        [InlineData("lt5.01|system1", 0, 1, 3, 4)]
-        [InlineData("gt2e-3|system1", 1, 3, 4, 7, 8)]
-        [InlineData("gt2e-3|system2", 2, 5, 6)]
-        [InlineData("gt4.9|system1", 4, 7, 8)]
-        [InlineData("gt5|system1", 7, 8)]
-        [InlineData("gt5.000|system1", 7, 8)]
-        [InlineData("gt5.1|system1", 7, 8)]
-        [InlineData("le1E-2|system1", 0)]
-        [InlineData("le1E-2|system2")]
-        [InlineData("le4.9|system1", 0, 1, 3)]
-        [InlineData("le5|system1", 0, 1, 3, 4)]
-        [InlineData("le5.000|system1", 0, 1, 3, 4)]
-        [InlineData("le5.0001|system1", 0, 1, 3, 4)]
-        [InlineData("ge4.9999|system1", 4, 7, 8)]
-        [InlineData("ge5|system1", 4, 7, 8)]
-        [InlineData("ge5.000|system1", 4, 7, 8)]
-        [InlineData("ge5.001|system1", 7, 8)]
-        [InlineData("sa4.9999|system1", 4, 7, 8)]
-        [InlineData("sa5|system1", 7, 8)]
-        [InlineData("eb2E-2|system1", 0)]
-        [InlineData("eb5|system1", 0, 1, 3)]
-        [InlineData("eb5.0001|system1", 0, 1, 3, 4)]
-        [InlineData("30||unit2")]
-        [InlineData("2e-3||unit1", 0)]
-        [InlineData("2.00e-3||unit1", 0)]
-        [InlineData("2e-3||unit2")]
-        [InlineData("5||unit2", 5)]
-        [InlineData("5.000||unit2", 5)]
-        [InlineData("eq30||unit2")]
-        [InlineData("eq5||unit2", 5)]
-        [InlineData("eq5.000||unit2", 5)]
-        [InlineData("ne5||unit2", 6, 7)]
-        [InlineData("ne5.000||unit2", 6, 7)]
-        [InlineData("lt4.9||unit2")]
-        [InlineData("lt5||unit2")]
-        [InlineData("lt5.000||unit2")]
-        [InlineData("lt5.01||unit2", 5)]
-        [InlineData("gt4.9||unit2", 5, 6, 7)]
-        [InlineData("gt5||unit2", 6, 7)]
-        [InlineData("gt5.000||unit2", 6, 7)]
-        [InlineData("gt5.1||unit2", 6, 7)]
-        [InlineData("le4.9||unit2")]
-        [InlineData("le5||unit2", 5)]
-        [InlineData("le5.000||unit2", 5)]
-        [InlineData("le5.0001||unit2", 5)]
-        [InlineData("ge4.9999||unit2", 5, 6, 7)]
-        [InlineData("ge5||unit2", 5, 6, 7)]
-        [InlineData("ge5.000||unit2", 5, 6, 7)]
-        [InlineData("ge5.001||unit2", 6, 7)]
-        [InlineData("sa4.9999||unit2", 5, 6, 7)]
-        [InlineData("sa5||unit2", 6, 7)]
-        [InlineData("eb5||unit2")]
-        [InlineData("eb5.0001||unit2", 5)]
-        [InlineData("30|system1|unit2")]
-        [InlineData("5|system1|unit2")]
-        [InlineData("0.002|system1|unit1", 0)]
-        [InlineData("2e-3|system1|unit1", 0)]
-        [InlineData("2E-3|system1|unit1", 0)]
-        [InlineData("2e-3|system1|unit2")]
-        [InlineData("2e-3|system2|unit1")]
-        [InlineData("5.000|system1|unit2")]
-        [InlineData("eq30|system1|unit2")]
-        [InlineData("eq5|system1|unit2")]
-        [InlineData("eq5.000|system1|unit2")]
-        [InlineData("ne5|system1|unit2", 7)]
-        [InlineData("ne5.000|system1|unit2", 7)]
-        [InlineData("lt4.9|system1|unit2")]
-        [InlineData("lt5|system1|unit2")]
-        [InlineData("lt5.000|system1|unit2")]
-        [InlineData("lt5.01|system1|unit2")]
-        [InlineData("gt4.9|system1|unit2", 7)]
-        [InlineData("gt5|system1|unit2", 7)]
-        [InlineData("gt5.000|system1|unit2", 7)]
-        [InlineData("gt5.1|system1|unit2", 7)]
-        [InlineData("le4.9|system1|unit2")]
-        [InlineData("le5|system1|unit2")]
-        [InlineData("le5.000|system1|unit2")]
-        [InlineData("le5.0001|system1|unit2")]
-        [InlineData("ge4.9999|system1|unit2", 7)]
-        [InlineData("ge5|system1|unit2", 7)]
-        [InlineData("ge5.000|system1|unit2", 7)]
-        [InlineData("ge5.001|system1|unit2", 7)]
-        [InlineData("sa4.9999|system1|unit2", 7)]
-        [InlineData("sa5|system1|unit2", 7)]
-        [InlineData("eb5|system1|unit2")]
-        [InlineData("eb5.0001|system1|unit2")]
-        public async Task GivenAQuantitySearchParameterWithQuantity_WhenSearched_ThenCorrectBundleShouldBeReturned(string queryValue, params int[] expectedIndices)
-        {
-            Bundle bundle = await _client.SearchAsync(ResourceType.Observation, $"value-quantity={queryValue}&_tag={_fixture.FixtureTag}");
-
-            Observation[] expected = expectedIndices.Select(i => _fixture.Observations[i]).ToArray();
-
-            ImportTestHelper.VerifyBundle(bundle, expected);
-        }
     }
 }
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Import/ImportReferenceSearchTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Import/ImportReferenceSearchTests.cs
index 4c9a7313..48b75078 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Import/ImportReferenceSearchTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Import/ImportReferenceSearchTests.cs
@@ -26,27 +26,5 @@ namespace Microsoft.Health.Fhir.Tests.E2E.Rest.Import
             _client = fixture.TestFhirClient;
             _fixture = fixture;
         }
-
-        [Theory]
-        [InlineData("organization=Organization/123", 0)]
-        [InlineData("organization=123", 0)]
-        [InlineData("organization=Organization/1")]
-        [InlineData("organization=organization/123")]
-        [InlineData("organization=Organization/ijk", 2)] // This is specified in the resource as "ijk", without the type, but the type can only be Organization
-        [InlineData("organization=ijk", 2)]
-        [InlineData("general-practitioner=Practitioner/p1", 3)]
-        [InlineData("general-practitioner:Practitioner=Practitioner/p1", 3)]
-        [InlineData("general-practitioner:Practitioner=p1", 3)]
-        [InlineData("general-practitioner=Practitioner/p2")] // This is specified in the resource as "p2", without the type, but because the parameter can reference several types and we don't resolve references, this search does not succeed
-        [InlineData("general-practitioner:Practitioner=p2")] // This is specified in the resource as "p2", without the type, but because the parameter can reference several types and we don't resolve references, this search does not succeed
-        [InlineData("general-practitioner=p2", 4)]
-        public async Task GivenAReferenceSearchParam_WhenSearched_ThenCorrectBundleShouldBeReturned(string query, params int[] matchIndices)
-        {
-            Bundle bundle = await _client.SearchAsync(ResourceType.Patient, $"{query}&_tag={_fixture.FixtureTag}");
-
-            Patient[] expected = matchIndices.Select(i => _fixture.Patients[i]).ToArray();
-
-            ImportTestHelper.VerifyBundle(bundle, expected);
-        }
     }
 }
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Import/ImportStringSearchTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Import/ImportStringSearchTests.cs
index 0d5816b3..4c6e07e9 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Import/ImportStringSearchTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Import/ImportStringSearchTests.cs
@@ -25,114 +25,5 @@ namespace Microsoft.Health.Fhir.Tests.E2E.Rest.Import
             _client = fixture.TestFhirClient;
             _fixture = fixture;
         }
-
-        [Theory]
-        [Trait(Traits.Priority, Priority.One)]
-        [InlineData("", "seattle", true)]
-        [InlineData("", "SEATTLE", true)]
-        [InlineData("", "Seattle", true)]
-        [InlineData("", "Sea", true)]
-        [InlineData("", "sea", true)]
-        [InlineData("", "123", false)]
-        [InlineData(":exact", "Seattle", true)]
-        [InlineData(":exact", "seattle", false)]
-        [InlineData(":exact", "SEATTLE", false)]
-        [InlineData(":exact", "Sea", false)]
-        [InlineData(":contains", "att", true)]
-        [InlineData(":contains", "EAT", true)]
-        [InlineData(":contains", "123", false)]
-        public async Task GivenAStringSearchParam_WhenSearched_ThenCorrectBundleShouldBeReturned(string modifier, string valueToSearch, bool shouldMatch)
-        {
-            string query = string.Format("address-city{0}={1}&_tag={2}", modifier, valueToSearch, _fixture.FixtureTag);
-
-            Bundle bundle = await _client.SearchAsync(ResourceType.Patient, query);
-
-            Assert.NotNull(bundle);
-
-            Patient expectedPatient = _fixture.Patients[0];
-
-            if (shouldMatch)
-            {
-                Assert.NotEmpty(bundle.Entry);
-                ImportTestHelper.VerifyBundle(bundle, expectedPatient);
-            }
-            else
-            {
-                Assert.Empty(bundle.Entry);
-            }
-        }
-
-        [Theory]
-        [Trait(Traits.Priority, Priority.One)]
-        [InlineData("", "Lorem", true)]
-        [InlineData("", "NotLorem", false)]
-        [InlineData("", ImportStringSearchTestFixture.LongString, true)]
-        [InlineData("", "Not" + ImportStringSearchTestFixture.LongString, false)]
-        [InlineData(":exact", ImportStringSearchTestFixture.LongString, true)]
-        [InlineData(":exact", ImportStringSearchTestFixture.LongString + "Not", false)]
-        [InlineData(":contains", ImportStringSearchTestFixture.LongString, true)]
-        [InlineData(":contains", ImportStringSearchTestFixture.LongString + "Not", false)]
-        [InlineData(":contains", "Vestibulum", true)]
-        [InlineData(":contains", "NotInString", false)]
-        public async Task GivenAStringSearchParamAndAResourceWithALongSearchParamValue_WhenSearched_ThenCorrectBundleShouldBeReturned(string modifier, string valueToSearch, bool shouldMatch)
-        {
-            string query = string.Format("address-city{0}={1}&_tag={2}", modifier, valueToSearch, _fixture.FixtureTag);
-
-            Bundle bundle = await _client.SearchAsync(ResourceType.Patient, query);
-
-            Assert.NotNull(bundle);
-
-            Patient expectedPatient = _fixture.Patients[3];
-
-            if (shouldMatch)
-            {
-                Assert.NotEmpty(bundle.Entry);
-                ImportTestHelper.VerifyBundle(bundle, expectedPatient);
-            }
-            else
-            {
-                Assert.Empty(bundle.Entry);
-            }
-        }
-
-        [Fact]
-        public async Task GivenAStringSearchParamWithMultipleValues_WhenSearched_ThenCorrectBundleShouldBeReturned()
-        {
-            Bundle bundle = await _client.SearchAsync(ResourceType.Patient, $"family=Smith,Ander&_tag={_fixture.FixtureTag}");
-
-            ImportTestHelper.VerifyBundle(bundle, _fixture.Patients[0], _fixture.Patients[2]);
-        }
-
-        [Fact]
-        public async Task GivenAStringSearchParamThatCoversSeveralFields_WhenSpecifiedTwiceInASearch_IntersectsTheTwoResultsProperly()
-        {
-            Bundle bundle = await _client.SearchAsync(ResourceType.Patient, $"name=Bea&name=Smith&_tag={_fixture.FixtureTag}");
-
-            ImportTestHelper.VerifyBundle(bundle, _fixture.Patients[0]);
-        }
-
-        [HttpIntegrationFixtureArgumentSets(DataStore.SqlServer, Format.Json)]
-        [Theory]
-        [Trait(Traits.Priority, Priority.One)]
-        [InlineData("muller")]
-        [InlineData("müller")]
-        public async Task GivenAStringSearchParamWithAccentAndAResourceWithAccent_WhenSearched_ThenCorrectBundleShouldBeReturned(string searchText)
-        {
-            string query = $"name={searchText}&_total=accurate&_tag={_fixture.FixtureTag}";
-
-            Bundle bundle = await _client.SearchAsync(ResourceType.Patient, query);
-
-            Assert.NotNull(bundle);
-            Assert.Equal(2, bundle.Total);
-            Assert.NotEmpty(bundle.Entry);
-        }
-
-        [Fact]
-        public async Task GivenAEscapedStringSearchParams_WhenSearched_ThenCorrectBundleShouldBeReturned()
-        {
-            Bundle bundle = await _client.SearchAsync(ResourceType.Patient, $"name=Richard\\,Muller&_tag={_fixture.FixtureTag}");
-
-            ImportTestHelper.VerifyBundle(bundle, _fixture.Patients[7]);
-        }
     }
 }
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Import/ImportTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Import/ImportTests.cs
index c30893b4..1f4d4920 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Import/ImportTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Import/ImportTests.cs
@@ -44,585 +44,5 @@ namespace Microsoft.Health.Fhir.Tests.E2E.Rest.Import
             _metricHandler = fixture.MetricHandler;
             _fixture = fixture;
         }
-
-        [Fact]
-        [Trait(Traits.Category, Categories.Authorization)]
-        public async Task GivenAUserWithImportPermissions_WhenImportData_TheServerShouldReturnSuccess()
-        {
-            _metricHandler?.ResetCount();
-            TestFhirClient tempClient = _client.CreateClientForUser(TestUsers.BulkImportUser, TestApplications.NativeClient);
-            string patientNdJsonResource = Samples.GetNdJson("Import-Patient");
-            patientNdJsonResource = Regex.Replace(patientNdJsonResource, "##PatientID##", m => Guid.NewGuid().ToString("N"));
-            (Uri location, string etag) = await ImportTestHelper.UploadFileAsync(patientNdJsonResource, _fixture.CloudStorageAccount);
-
-            var request = new ImportRequest()
-            {
-                InputFormat = "application/fhir+ndjson",
-                InputSource = new Uri("https://other-server.example.org"),
-                StorageDetail = new ImportRequestStorageDetail() { Type = "azure-blob" },
-                Input = new List<InputResource>()
-                {
-                    new InputResource()
-                    {
-                        Url = location,
-                        Type = "Patient",
-                    },
-                },
-            };
-
-            await ImportCheckAsync(request, tempClient);
-
-            // Only check metric for local tests
-            if (_fixture.IsUsingInProcTestServer)
-            {
-                var resourceCount = Regex.Matches(patientNdJsonResource, "{\"resourceType\":").Count;
-                var notificationList = _metricHandler.NotificationMapping[typeof(ImportJobMetricsNotification)];
-                Assert.Single(notificationList);
-                var notification = notificationList.First() as ImportJobMetricsNotification;
-                Assert.Equal(JobStatus.Completed.ToString(), notification.Status);
-                Assert.NotNull(notification.DataSize);
-                Assert.Equal(resourceCount, notification.SucceedCount);
-                Assert.Equal(0, notification.FailedCount);
-            }
-        }
-
-        [Fact]
-        [Trait(Traits.Category, Categories.Authorization)]
-        public async Task GivenAUserWithoutImportPermissions_WhenImportData_ThenServerShouldReturnForbidden()
-        {
-            TestFhirClient tempClient = _client.CreateClientForUser(TestUsers.ReadOnlyUser, TestApplications.NativeClient);
-            string patientNdJsonResource = Samples.GetNdJson("Import-Patient");
-            (Uri location, string etag) = await ImportTestHelper.UploadFileAsync(patientNdJsonResource, _fixture.CloudStorageAccount);
-
-            var request = new ImportRequest()
-            {
-                InputFormat = "application/fhir+ndjson",
-                InputSource = new Uri("https://other-server.example.org"),
-                StorageDetail = new ImportRequestStorageDetail() { Type = "azure-blob" },
-                Input = new List<InputResource>()
-                {
-                    new InputResource()
-                    {
-                        Url = location,
-                        Type = "Patient",
-                    },
-                },
-            };
-
-            request.Mode = ImportConstants.InitialLoadMode;
-            request.Force = true;
-            FhirException fhirException = await Assert.ThrowsAsync<FhirException>(async () => await tempClient.ImportAsync(request.ToParameters(), CancellationToken.None));
-            Assert.StartsWith(ForbiddenMessage, fhirException.Message);
-            Assert.Equal(HttpStatusCode.Forbidden, fhirException.StatusCode);
-        }
-
-        [Fact]
-        public async Task GivenImportOperationEnabled_WhenImportOperationTriggered_ThenDataShouldBeImported()
-        {
-            _metricHandler?.ResetCount();
-            string patientNdJsonResource = Samples.GetNdJson("Import-Patient");
-            patientNdJsonResource = Regex.Replace(patientNdJsonResource, "##PatientID##", m => Guid.NewGuid().ToString("N"));
-            (Uri location, string etag) = await ImportTestHelper.UploadFileAsync(patientNdJsonResource, _fixture.CloudStorageAccount);
-
-            var request = new ImportRequest()
-            {
-                InputFormat = "application/fhir+ndjson",
-                InputSource = new Uri("https://other-server.example.org"),
-                StorageDetail = new ImportRequestStorageDetail() { Type = "azure-blob" },
-                Input = new List<InputResource>()
-                {
-                    new InputResource()
-                    {
-                        Url = location,
-                        Etag = etag,
-                        Type = "Patient",
-                    },
-                },
-            };
-
-            await ImportCheckAsync(request);
-
-            // Only check metric for local tests
-            if (_fixture.IsUsingInProcTestServer)
-            {
-                var resourceCount = Regex.Matches(patientNdJsonResource, "{\"resourceType\":").Count;
-                var notificationList = _metricHandler.NotificationMapping[typeof(ImportJobMetricsNotification)];
-                Assert.Single(notificationList);
-                var notification = notificationList.First() as ImportJobMetricsNotification;
-                Assert.Equal(JobStatus.Completed.ToString(), notification.Status);
-                Assert.NotNull(notification.DataSize);
-                Assert.Equal(resourceCount, notification.SucceedCount);
-                Assert.Equal(0, notification.FailedCount);
-            }
-        }
-
-        [Fact]
-        public async Task GivenImportOperationEnabled_WhenImportOperationTriggeredBeforePreviousTaskCompleted_ThenConflictShouldBeReturned()
-        {
-            string patientNdJsonResource = Samples.GetNdJson("Import-Patient");
-            patientNdJsonResource = Regex.Replace(patientNdJsonResource, "##PatientID##", m => Guid.NewGuid().ToString("N"));
-            (Uri location, string etag) = await ImportTestHelper.UploadFileAsync(patientNdJsonResource, _fixture.CloudStorageAccount);
-
-            var request = new ImportRequest()
-            {
-                InputFormat = "application/fhir+ndjson",
-                InputSource = new Uri("https://other-server.example.org"),
-                StorageDetail = new ImportRequestStorageDetail() { Type = "azure-blob" },
-                Input = new List<InputResource>()
-                {
-                    new InputResource()
-                    {
-                        Url = location,
-                        Etag = etag,
-                        Type = "Patient",
-                    },
-                },
-            };
-
-            request.Mode = ImportConstants.InitialLoadMode;
-            request.Force = true;
-            Uri checkLocation = await ImportTestHelper.CreateImportTaskAsync(_client, request);
-            FhirException fhirException = await Assert.ThrowsAsync<FhirException>(async () => await _client.ImportAsync(request.ToParameters(), CancellationToken.None));
-            Assert.Equal(HttpStatusCode.Conflict, fhirException.StatusCode);
-
-            HttpResponseMessage response;
-            while ((response = await _client.CheckImportAsync(checkLocation, CancellationToken.None)).StatusCode == System.Net.HttpStatusCode.Accepted)
-            {
-                await Task.Delay(TimeSpan.FromSeconds(5));
-            }
-        }
-
-        [Fact]
-        public async Task GivenImportOperationEnabled_WhenImportOperationTriggeredWithoutEtag_ThenDataShouldBeImported()
-        {
-            _metricHandler?.ResetCount();
-            string patientNdJsonResource = Samples.GetNdJson("Import-Patient");
-            patientNdJsonResource = Regex.Replace(patientNdJsonResource, "##PatientID##", m => Guid.NewGuid().ToString("N"));
-            (Uri location, string _) = await ImportTestHelper.UploadFileAsync(patientNdJsonResource, _fixture.CloudStorageAccount);
-
-            var request = new ImportRequest()
-            {
-                InputFormat = "application/fhir+ndjson",
-                InputSource = new Uri("https://other-server.example.org"),
-                StorageDetail = new ImportRequestStorageDetail() { Type = "azure-blob" },
-                Input = new List<InputResource>()
-                {
-                    new InputResource()
-                    {
-                        Url = location,
-                        Type = "Patient",
-                    },
-                },
-            };
-
-            await ImportCheckAsync(request);
-
-            // Only check metric for local tests
-            if (_fixture.IsUsingInProcTestServer)
-            {
-                var resourceCount = Regex.Matches(patientNdJsonResource, "{\"resourceType\":").Count;
-                var notificationList = _metricHandler.NotificationMapping[typeof(ImportJobMetricsNotification)];
-                Assert.Single(notificationList);
-                var notification = notificationList.First() as ImportJobMetricsNotification;
-                Assert.Equal(JobStatus.Completed.ToString(), notification.Status);
-                Assert.NotNull(notification.DataSize);
-                Assert.Equal(resourceCount, notification.SucceedCount);
-                Assert.Equal(0, notification.FailedCount);
-            }
-        }
-
-        [Fact]
-        public async Task GivenImportOperationEnabled_WhenImportResourceWithWrongType_ThenErrorLogShouldBeUploaded()
-        {
-            _metricHandler?.ResetCount();
-            string patientNdJsonResource = Samples.GetNdJson("Import-Patient");
-            patientNdJsonResource = Regex.Replace(patientNdJsonResource, "##PatientID##", m => Guid.NewGuid().ToString("N"));
-            (Uri location, string etag) = await ImportTestHelper.UploadFileAsync(patientNdJsonResource, _fixture.CloudStorageAccount);
-
-            var request = new ImportRequest()
-            {
-                InputFormat = "application/fhir+ndjson",
-                InputSource = new Uri("https://other-server.example.org"),
-                StorageDetail = new ImportRequestStorageDetail() { Type = "azure-blob" },
-                Input = new List<InputResource>()
-                {
-                    new InputResource()
-                    {
-                        Url = location,
-                        Etag = etag,
-                        Type = "Observation", // not match the resource
-                    },
-                },
-            };
-
-            Uri checkLocation = await ImportTestHelper.CreateImportTaskAsync(_client, request);
-
-            HttpResponseMessage response;
-            while ((response = await _client.CheckImportAsync(checkLocation, CancellationToken.None)).StatusCode == System.Net.HttpStatusCode.Accepted)
-            {
-                await Task.Delay(TimeSpan.FromSeconds(5));
-            }
-
-            Assert.Equal(System.Net.HttpStatusCode.OK, response.StatusCode);
-            ImportJobResult result = JsonConvert.DeserializeObject<ImportJobResult>(await response.Content.ReadAsStringAsync());
-            Assert.Single(result.Error);
-            Assert.NotEmpty(result.Error.First().Url);
-
-            // Only check metric for local tests
-            if (_fixture.IsUsingInProcTestServer)
-            {
-                var resourceCount = Regex.Matches(patientNdJsonResource, "{\"resourceType\":").Count;
-                var notificationList = _metricHandler.NotificationMapping[typeof(ImportJobMetricsNotification)];
-                Assert.Single(notificationList);
-                var notification = notificationList.First() as ImportJobMetricsNotification;
-                Assert.Equal(JobStatus.Completed.ToString(), notification.Status);
-                Assert.NotNull(notification.DataSize);
-                Assert.Equal(0, notification.SucceedCount);
-                Assert.Equal(resourceCount, notification.FailedCount);
-            }
-        }
-
-        [Fact]
-        public async Task GivenImportOperationEnabled_WhenImportOperationTriggeredWithMultipleFiles_ThenDataShouldBeImported()
-        {
-            _metricHandler?.ResetCount();
-            string patientNdJsonResource = Samples.GetNdJson("Import-SinglePatientTemplate");
-            string resourceId1 = Guid.NewGuid().ToString("N");
-            string patientNdJsonResource1 = patientNdJsonResource.Replace("##PatientID##", resourceId1);
-            string resourceId2 = Guid.NewGuid().ToString("N");
-            string patientNdJsonResource2 = patientNdJsonResource.Replace("##PatientID##", resourceId2);
-
-            (Uri location1, string _) = await ImportTestHelper.UploadFileAsync(patientNdJsonResource1, _fixture.CloudStorageAccount);
-            (Uri location2, string _) = await ImportTestHelper.UploadFileAsync(patientNdJsonResource2, _fixture.CloudStorageAccount);
-
-            var request = new ImportRequest()
-            {
-                InputFormat = "application/fhir+ndjson",
-                InputSource = new Uri("https://other-server.example.org"),
-                StorageDetail = new ImportRequestStorageDetail() { Type = "azure-blob" },
-                Input = new List<InputResource>()
-                {
-                    new InputResource()
-                    {
-                        Url = location1,
-                        Type = "Patient",
-                    },
-                    new InputResource()
-                    {
-                        Url = location2,
-                        Type = "Patient",
-                    },
-                },
-            };
-
-            await ImportCheckAsync(request);
-
-            // Only check metric for local tests
-            if (_fixture.IsUsingInProcTestServer)
-            {
-                var resourceCount = Regex.Matches(patientNdJsonResource, "{\"resourceType\":").Count * 2;
-                var notificationList = _metricHandler.NotificationMapping[typeof(ImportJobMetricsNotification)];
-                Assert.Single(notificationList);
-                var notification = notificationList.First() as ImportJobMetricsNotification;
-                Assert.Equal(JobStatus.Completed.ToString(), notification.Status);
-                Assert.NotNull(notification.DataSize);
-                Assert.Equal(resourceCount, notification.SucceedCount);
-                Assert.Equal(0, notification.FailedCount);
-            }
-        }
-
-        [Fact]
-        public async Task GivenImportOperationEnabled_WhenImportInvalidResource_ThenErrorLogsShouldBeOutput()
-        {
-            _metricHandler?.ResetCount();
-            string patientNdJsonResource = Samples.GetNdJson("Import-InvalidPatient");
-            patientNdJsonResource = Regex.Replace(patientNdJsonResource, "##PatientID##", m => Guid.NewGuid().ToString("N"));
-            (Uri location, string etag) = await ImportTestHelper.UploadFileAsync(patientNdJsonResource, _fixture.CloudStorageAccount);
-
-            var request = new ImportRequest()
-            {
-                InputFormat = "application/fhir+ndjson",
-                InputSource = new Uri("https://other-server.example.org"),
-                StorageDetail = new ImportRequestStorageDetail() { Type = "azure-blob" },
-                Input = new List<InputResource>()
-                {
-                    new InputResource()
-                    {
-                        Url = location,
-                        Etag = etag,
-                        Type = "Patient",
-                    },
-                },
-            };
-
-            Uri checkLocation = await ImportTestHelper.CreateImportTaskAsync(_client, request);
-
-            HttpResponseMessage response;
-            while ((response = await _client.CheckImportAsync(checkLocation, CancellationToken.None)).StatusCode == System.Net.HttpStatusCode.Accepted)
-            {
-                await Task.Delay(TimeSpan.FromSeconds(5));
-            }
-
-            Assert.Equal(System.Net.HttpStatusCode.OK, response.StatusCode);
-            ImportJobResult result = JsonConvert.DeserializeObject<ImportJobResult>(await response.Content.ReadAsStringAsync());
-            Assert.NotEmpty(result.Output);
-            Assert.Equal(1, result.Error.Count);
-            Assert.NotEmpty(result.Request);
-
-            string errorLoation = result.Error.ToArray()[0].Url;
-            string[] errorContents = (await ImportTestHelper.DownloadFileAsync(errorLoation, _fixture.CloudStorageAccount)).Split("\r\n", StringSplitOptions.RemoveEmptyEntries);
-            Assert.Single(errorContents);
-
-            // Only check metric for local tests
-            if (_fixture.IsUsingInProcTestServer)
-            {
-                var resourceCount = Regex.Matches(patientNdJsonResource, "{\"resourceType\":").Count;
-                var notificationList = _metricHandler.NotificationMapping[typeof(ImportJobMetricsNotification)];
-                Assert.Single(notificationList);
-                var notification = notificationList.First() as ImportJobMetricsNotification;
-                Assert.Equal(JobStatus.Completed.ToString(), notification.Status);
-                Assert.NotNull(notification.DataSize);
-                Assert.Equal(resourceCount, notification.SucceedCount);
-                Assert.Equal(1, notification.FailedCount);
-            }
-        }
-
-        [Fact]
-        public async Task GivenImportOperationEnabled_WhenImportDuplicatedResource_ThenDupResourceShouldBeCleaned()
-        {
-            _metricHandler?.ResetCount();
-            string patientNdJsonResource = Samples.GetNdJson("Import-DupPatientTemplate");
-            string resourceId = Guid.NewGuid().ToString("N");
-            patientNdJsonResource = patientNdJsonResource.Replace("##PatientID##", resourceId);
-            (Uri location, string etag) = await ImportTestHelper.UploadFileAsync(patientNdJsonResource, _fixture.CloudStorageAccount);
-
-            var request = new ImportRequest()
-            {
-                InputFormat = "application/fhir+ndjson",
-                InputSource = new Uri("https://other-server.example.org"),
-                StorageDetail = new ImportRequestStorageDetail() { Type = "azure-blob" },
-                Input = new List<InputResource>()
-                {
-                    new InputResource()
-                    {
-                        Url = location,
-                        Etag = etag,
-                        Type = "Patient",
-                    },
-                },
-            };
-
-            await ImportCheckAsync(request, errorCount: 1);
-            await ImportCheckAsync(request, errorCount: 2);
-
-            Patient patient = await _client.ReadAsync<Patient>(ResourceType.Patient, resourceId);
-            Assert.Equal(resourceId, patient.Id);
-
-            // Only check metric for local tests
-            if (_fixture.IsUsingInProcTestServer)
-            {
-                var notificationList = _metricHandler.NotificationMapping[typeof(ImportJobMetricsNotification)];
-                Assert.Equal(2, notificationList.Count);
-
-                var notification1 = notificationList.First() as ImportJobMetricsNotification;
-                Assert.Equal(JobStatus.Completed.ToString(), notification1.Status);
-                Assert.Equal(1, notification1.SucceedCount);
-                Assert.Equal(1, notification1.FailedCount);
-
-                var notification2 = notificationList[1] as ImportJobMetricsNotification;
-                Assert.Equal(JobStatus.Completed.ToString(), notification1.Status);
-                Assert.Equal(0, notification2.SucceedCount);
-                Assert.Equal(2, notification2.FailedCount);
-            }
-        }
-
-        [Fact]
-        public async Task GivenImportOperationEnabled_WhenCancelImportTask_ThenTaskShouldBeCanceled()
-        {
-            _metricHandler?.ResetCount();
-            string patientNdJsonResource = Samples.GetNdJson("Import-Patient");
-            patientNdJsonResource = Regex.Replace(patientNdJsonResource, "##PatientID##", m => Guid.NewGuid().ToString("N"));
-            (Uri location, string etag) = await ImportTestHelper.UploadFileAsync(patientNdJsonResource, _fixture.CloudStorageAccount);
-
-            var request = new ImportRequest()
-            {
-                InputFormat = "application/fhir+ndjson",
-                InputSource = new Uri("https://other-server.example.org"),
-                StorageDetail = new ImportRequestStorageDetail() { Type = "azure-blob" },
-                Input = new List<InputResource>()
-                {
-                    new InputResource()
-                    {
-                        Url = location,
-                        Etag = etag,
-                        Type = "Patient",
-                    },
-                },
-            };
-
-            Uri checkLocation = await ImportTestHelper.CreateImportTaskAsync(_client, request);
-            var respone = await _client.CancelImport(checkLocation);
-
-            // wait task completed
-            while (respone.StatusCode != HttpStatusCode.Conflict)
-            {
-                respone = await _client.CancelImport(checkLocation);
-                await Task.Delay(TimeSpan.FromSeconds(3));
-            }
-
-            FhirException fhirException = await Assert.ThrowsAsync<FhirException>(async () => await _client.CheckImportAsync(checkLocation));
-            Assert.Equal(HttpStatusCode.BadRequest, fhirException.StatusCode);
-        }
-
-        [Fact(Skip = "long running tests for invalid url")]
-        public async Task GivenImportOperationEnabled_WhenImportInvalidResourceUrl_ThenBadRequestShouldBeReturned()
-        {
-            _metricHandler?.ResetCount();
-            var request = new ImportRequest()
-            {
-                InputFormat = "application/fhir+ndjson",
-                InputSource = new Uri("https://other-server.example.org"),
-                StorageDetail = new ImportRequestStorageDetail() { Type = "azure-blob" },
-                Input = new List<InputResource>()
-                {
-                    new InputResource()
-                    {
-                        Url = new Uri("https://fhirtest-invalid.com"),
-                        Type = "Patient",
-                    },
-                },
-            };
-
-            Uri checkLocation = await ImportTestHelper.CreateImportTaskAsync(_client, request);
-
-            FhirException fhirException = await Assert.ThrowsAsync<FhirException>(
-                async () =>
-                {
-                    HttpResponseMessage response;
-                    while ((response = await _client.CheckImportAsync(checkLocation, CancellationToken.None)).StatusCode == System.Net.HttpStatusCode.Accepted)
-                    {
-                        await Task.Delay(TimeSpan.FromSeconds(5));
-                    }
-                });
-            Assert.Equal(HttpStatusCode.BadRequest, fhirException.StatusCode);
-
-            // Only check metric for local tests
-            if (_fixture.IsUsingInProcTestServer)
-            {
-                var notificationList = _metricHandler.NotificationMapping[typeof(ImportJobMetricsNotification)];
-                Assert.Single(notificationList);
-                var notification = notificationList.First() as ImportJobMetricsNotification;
-                Assert.Equal(JobStatus.Failed.ToString(), notification.Status);
-                Assert.Null(notification.DataSize);
-                Assert.Null(notification.SucceedCount);
-                Assert.Null(notification.FailedCount);
-            }
-        }
-
-        [Fact]
-        public async Task GivenImportOperationEnabled_WhenImportInvalidETag_ThenBadRequestShouldBeReturned()
-        {
-            _metricHandler?.ResetCount();
-            string patientNdJsonResource = Samples.GetNdJson("Import-Patient");
-            patientNdJsonResource = Regex.Replace(patientNdJsonResource, "##PatientID##", m => Guid.NewGuid().ToString("N"));
-            (Uri location, string etag) = await ImportTestHelper.UploadFileAsync(patientNdJsonResource, _fixture.CloudStorageAccount);
-
-            var request = new ImportRequest()
-            {
-                InputFormat = "application/fhir+ndjson",
-                InputSource = new Uri("https://other-server.example.org"),
-                StorageDetail = new ImportRequestStorageDetail() { Type = "azure-blob" },
-                Input = new List<InputResource>()
-                {
-                    new InputResource()
-                    {
-                        Url = location,
-                        Etag = "invalid",
-                        Type = "Patient",
-                    },
-                },
-            };
-
-            Uri checkLocation = await ImportTestHelper.CreateImportTaskAsync(_client, request);
-
-            FhirException fhirException = await Assert.ThrowsAsync<FhirException>(
-                async () =>
-                {
-                    HttpResponseMessage response;
-                    while ((response = await _client.CheckImportAsync(checkLocation, CancellationToken.None)).StatusCode == System.Net.HttpStatusCode.Accepted)
-                    {
-                        await Task.Delay(TimeSpan.FromSeconds(5));
-                    }
-                });
-            Assert.Equal(HttpStatusCode.BadRequest, fhirException.StatusCode);
-
-            // Only check metric for local tests
-            if (_fixture.IsUsingInProcTestServer)
-            {
-                var notificationList = _metricHandler.NotificationMapping[typeof(ImportJobMetricsNotification)];
-                Assert.Single(notificationList);
-                var notification = notificationList.First() as ImportJobMetricsNotification;
-                Assert.Equal(JobStatus.Failed.ToString(), notification.Status);
-                Assert.Null(notification.DataSize);
-                Assert.Equal(0, notification.SucceedCount);
-                Assert.Equal(0, notification.FailedCount);
-            }
-        }
-
-        [Fact]
-        public async Task GivenImportOperationEnabled_WhenImportInvalidResourceType_ThenBadRequestShouldBeReturned()
-        {
-            string patientNdJsonResource = Samples.GetNdJson("Import-Patient");
-            patientNdJsonResource = Regex.Replace(patientNdJsonResource, "##PatientID##", m => Guid.NewGuid().ToString("N"));
-            (Uri location, string etag) = await ImportTestHelper.UploadFileAsync(patientNdJsonResource, _fixture.CloudStorageAccount);
-
-            var request = new ImportRequest()
-            {
-                InputFormat = "application/fhir+ndjson",
-                InputSource = new Uri("https://other-server.example.org"),
-                StorageDetail = new ImportRequestStorageDetail() { Type = "azure-blob" },
-                Input = new List<InputResource>()
-                {
-                    new InputResource()
-                    {
-                        Url = location,
-                        Type = "Invalid",
-                    },
-                },
-            };
-
-            FhirException fhirException = await Assert.ThrowsAsync<FhirException>(
-                async () => await ImportTestHelper.CreateImportTaskAsync(_client, request));
-
-            Assert.Equal(HttpStatusCode.BadRequest, fhirException.StatusCode);
-        }
-
-        private async Task<Uri> ImportCheckAsync(ImportRequest request, TestFhirClient client = null, int? errorCount = null)
-        {
-            client = client ?? _client;
-            Uri checkLocation = await ImportTestHelper.CreateImportTaskAsync(client, request);
-
-            HttpResponseMessage response;
-            while ((response = await client.CheckImportAsync(checkLocation, CancellationToken.None)).StatusCode == System.Net.HttpStatusCode.Accepted)
-            {
-                await Task.Delay(TimeSpan.FromSeconds(5));
-            }
-
-            Assert.Equal(System.Net.HttpStatusCode.OK, response.StatusCode);
-            ImportJobResult result = JsonConvert.DeserializeObject<ImportJobResult>(await response.Content.ReadAsStringAsync());
-            Assert.NotEmpty(result.Output);
-            if (errorCount != null)
-            {
-                Assert.Equal(errorCount.Value, result.Error.First().Count);
-            }
-            else
-            {
-                Assert.Empty(result.Error);
-            }
-
-            Assert.NotEmpty(result.Request);
-
-            return checkLocation;
-        }
     }
 }
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Import/ImportTokenSearchTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Import/ImportTokenSearchTests.cs
index 89348186..a6c046fc 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Import/ImportTokenSearchTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Import/ImportTokenSearchTests.cs
@@ -40,94 +40,5 @@ namespace Microsoft.Health.Fhir.Tests.E2E.Rest.Import
             _client = fixture.TestFhirClient;
             _fixture = fixture;
         }
-
-        [Theory]
-        [MemberData(nameof(TokenSearchParameterData))]
-        public async Task GivenATokenSearchParameter_WhenSearched_ThenCorrectBundleShouldBeReturned(string queryValue, params int[] expectedIndices)
-        {
-            Bundle bundle = await _client.SearchAsync(ResourceType.Observation, $"value-concept={queryValue}&_tag={_fixture.FixtureTag}");
-
-            Observation[] expected = expectedIndices.Select(i => _fixture.Observations[i]).ToArray();
-
-            ImportTestHelper.VerifyBundle(bundle, expected);
-        }
-
-        [Theory]
-        [InlineData("code1")]
-        [InlineData("text", 2, 3, 4, 5, 6)]
-        [InlineData("text2", 3, 6)]
-        public async Task GivenATokenSearchParameterWithTextModifier_WhenSearched_ThenCorrectBundleShouldBeReturned(string queryValue, params int[] expectedIndices)
-        {
-            Bundle bundle = await _client.SearchAsync(ResourceType.Observation, $"value-concept:text={queryValue}&_tag={_fixture.FixtureTag}");
-
-            Observation[] expected = expectedIndices.Select(i => _fixture.Observations[i]).ToArray();
-
-            ImportTestHelper.VerifyBundle(bundle, expected);
-        }
-
-        [Theory]
-        [MemberData(nameof(TokenSearchParameterData))]
-        public async Task GivenATokenSearchParameterWithNotModifier_WhenSearched_ThenCorrectBundleShouldBeReturned(string queryValue, params int[] excludeIndices)
-        {
-            Bundle bundle = await _client.SearchAsync(ResourceType.Observation, $"value-concept:not={queryValue}&_tag={_fixture.FixtureTag}");
-
-            Observation[] expected = _fixture.Observations.Where((_, i) => !excludeIndices.Contains(i)).ToArray();
-
-            ImportTestHelper.VerifyBundle(bundle, expected);
-        }
-
-        [Fact]
-        public async Task GivenATokenSearchParameterWithNotModifier_WhenSearchedOverMissingValue_ThenCorrectBundleShouldBeReturned()
-        {
-            Bundle bundle = await _client.SearchAsync(ResourceType.Observation, $"category:not=test&_tag={_fixture.FixtureTag}");
-
-            Observation[] expected = _fixture.Observations.Where((_, i) => i != 8).ToArray();
-
-            ImportTestHelper.VerifyBundle(bundle, expected);
-        }
-
-        [Theory]
-        [InlineData("code1", 0, 5, 6, 8)]
-        public async Task GivenMultipleTokenSearchParametersWithNotModifiers_WhenSearched_ThenCorrectBundleShouldBeReturned(string queryValue, params int[] excludeIndices)
-        {
-            Bundle bundle = await _client.SearchAsync(ResourceType.Observation, $"category:not=test&value-concept:not={queryValue}&_tag={_fixture.FixtureTag}");
-
-            Observation[] expected = _fixture.Observations.Where((_, i) => !excludeIndices.Contains(i)).ToArray();
-
-            ImportTestHelper.VerifyBundle(bundle, expected);
-        }
-
-        [Theory]
-        [InlineData(1)]
-        [InlineData(2)]
-        public async Task GivenIdWithNotModifier_WhenSearched_ThenCorrectBundleShouldBeReturned(int count)
-        {
-            Bundle bundle = await _client.SearchAsync(ResourceType.Observation, $"_id:not={string.Join(",", _fixture.Observations.Take(count).Select(x => x.Id))}&_tag={_fixture.FixtureTag}");
-
-            Observation[] expected = _fixture.Observations.Skip(count).ToArray();
-
-            ImportTestHelper.VerifyBundle(bundle, expected);
-        }
-
-        [Theory]
-        [InlineData(ResourceType.Patient)]
-        [InlineData(ResourceType.Patient, ResourceType.Organization)]
-        public async Task GivenTypeWithNotModifier_WhenSearched_ThenCorrectBundleShouldBeReturned(params ResourceType[] resourceTypes)
-        {
-            Bundle bundle = await _client.SearchAsync($"?_tag={_fixture.FixtureTag}&_type:not={string.Join(",", resourceTypes)}");
-
-            ImportTestHelper.VerifyBundle(bundle, _fixture.Observations.ToArray());
-        }
-
-        [Theory]
-        [MemberData(nameof(TokenSearchParameterData))]
-        public async Task GivenATokenSearchParameterWithNotModifier_WhenSearchedWithType_ThenCorrectBundleShouldBeReturned(string queryValue, params int[] excludeIndices)
-        {
-            Bundle bundle = await _client.SearchAsync($"?_type={ResourceType.Observation}&value-concept:not={queryValue}&_tag={_fixture.FixtureTag}");
-
-            Observation[] expected = _fixture.Observations.Where((_, i) => !excludeIndices.Contains(i)).ToArray();
-
-            ImportTestHelper.VerifyBundle(bundle, expected);
-        }
     }
 }
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Import/ImportUriSearchTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Import/ImportUriSearchTests.cs
index bb16d02f..7866330d 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Import/ImportUriSearchTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Import/ImportUriSearchTests.cs
@@ -27,26 +27,5 @@ namespace Microsoft.Health.Fhir.Tests.E2E.Rest.Import
             _client = fixture.TestFhirClient;
             _fixture = fixture;
         }
-
-        [Theory]
-        [InlineData("", "http://somewhere.com/test/system", 0)]
-        [InlineData("", "http://somewhere.COM/test/system")]
-        [InlineData("", "http://example.org/rdf#54135-9", 2)]
-        [InlineData("", "urn://localhost/test", 1)]
-        [InlineData(":above", "http://somewhere.com/test/system/123", 0)]
-        [InlineData(":above", "test")]
-        [InlineData(":above", "urn://localhost/test")]
-        [InlineData(":above", "http://example.org/rdf#54135-9-9-10", 2, 3)]
-        [InlineData(":below", "http", 0, 2, 3)]
-        [InlineData(":below", "test")]
-        [InlineData(":below", "urn")]
-        public async Task GivenAUriSearchParam_WhenSearched_ThenCorrectBundleShouldBeReturned(string modifier, string queryValue, params int[] expectedIndices)
-        {
-            Bundle bundle = await _client.SearchAsync(ResourceType.ValueSet, $"url{modifier}={HttpUtility.UrlEncode(queryValue)}&_tag={_fixture.FixtureTag}");
-
-            ValueSet[] expected = expectedIndices.Select(i => _fixture.ValueSets[i]).ToArray();
-
-            ImportTestHelper.VerifyBundle(bundle, expected);
-        }
     }
 }
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/JsonPatchTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/JsonPatchTests.cs
index 319d1603..97be2591 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/JsonPatchTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/JsonPatchTests.cs
@@ -19,7 +19,7 @@ using Task = System.Threading.Tasks.Task;
 
 namespace Microsoft.Health.Fhir.Tests.E2E.Rest
 {
-    [HttpIntegrationFixtureArgumentSets(DataStore.All, Format.Json)]
+    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.Json)]
     public class JsonPatchTests : IClassFixture<HttpIntegrationTestFixture>
     {
         private readonly TestFhirClient _client;
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/MemberMatchTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/MemberMatchTests.cs
index 78249938..d6b076fd 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/MemberMatchTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/MemberMatchTests.cs
@@ -16,7 +16,7 @@ using Task = System.Threading.Tasks.Task;
 namespace Microsoft.Health.Fhir.Tests.E2E.Rest
 {
     [Trait(Traits.Category, Categories.MemberMatch)]
-    [HttpIntegrationFixtureArgumentSets(DataStore.All, Format.All)]
+    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.All)]
     public sealed class MemberMatchTests : IClassFixture<MemberMatchTestFixture>
     {
         private readonly FhirClient _client;
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/MetadataTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/MetadataTests.cs
index 85dce2a3..5bb92060 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/MetadataTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/MetadataTests.cs
@@ -18,7 +18,7 @@ using Task = System.Threading.Tasks.Task;
 
 namespace Microsoft.Health.Fhir.Tests.E2E.Rest
 {
-    [HttpIntegrationFixtureArgumentSets(DataStore.All, Format.All)]
+    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.All)]
     public class MetadataTests : IClassFixture<HttpIntegrationTestFixture>
     {
         private readonly TestFhirClient _client;
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Metric/MetricTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Metric/MetricTests.cs
index 2061ed94..88f919a3 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Metric/MetricTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Metric/MetricTests.cs
@@ -94,42 +94,6 @@ namespace Microsoft.Health.Fhir.Tests.E2E.Rest.Metric
                  (type: typeof(CosmosStorageRequestMetricsNotification), count: 11, resourceType: "Patient"));
         }
 
-        [HttpIntegrationFixtureArgumentSets(DataStore.SqlServer, Format.Json)]
-        [Trait(Traits.Category, Categories.Batch)]
-        [Trait(Traits.Priority, Priority.One)]
-        [Fact]
-        public async Task GivenABatch_WhenInvokedAtSqlServer_MetricNotificationsShouldBeEmitted()
-        {
-            _metricHandler?.ResetCount();
-
-            await ExecuteAndValidate(
-                async () =>
-                {
-                    var result = await _client.PostBundleAsync(Samples.GetDefaultBatch().ToPoco());
-                    return result.Response;
-                },
-                (type: typeof(ApiResponseNotification), count: 1, resourceType: (string)null));
-        }
-
-        [HttpIntegrationFixtureArgumentSets(dataStores: DataStore.SqlServer)]
-        [Trait(Traits.Category, Categories.Transaction)]
-        [Trait(Traits.Priority, Priority.One)]
-        [Fact]
-        public async Task GivenATransaction_WhenInvoked_MetricNotificationsShouldBeEmitted()
-        {
-            _metricHandler?.ResetCount();
-
-            var requestBundle = Samples.GetJsonSample("Bundle-TransactionWithValidBundleEntry").ToPoco<Hl7.Fhir.Model.Bundle>();
-
-            await ExecuteAndValidate(
-                async () =>
-                {
-                    var result = await _client.PostBundleAsync(requestBundle);
-                    return result.Response;
-                },
-                (type: typeof(ApiResponseNotification), count: 1, resourceType: (string)null));
-        }
-
         private async Task ExecuteAndValidate<T>(Func<Task<T>> action, params (Type type, int count, string resourceType)[] expectedNotifications)
         {
             if (!_fixture.IsUsingInProcTestServer)
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ObservationResolveReferenceTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ObservationResolveReferenceTests.cs
index b0e92143..694a97da 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ObservationResolveReferenceTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ObservationResolveReferenceTests.cs
@@ -19,7 +19,7 @@ using Task = System.Threading.Tasks.Task;
 
 namespace Microsoft.Health.Fhir.Tests.E2E.Rest
 {
-    [HttpIntegrationFixtureArgumentSets(DataStore.All, Format.All)]
+    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.All)]
     public class ObservationResolveReferenceTests : IClassFixture<HttpIntegrationTestFixture>
     {
         private readonly TestFhirClient _client;
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/OperationVersionsTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/OperationVersionsTests.cs
index 1b719341..f036606a 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/OperationVersionsTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/OperationVersionsTests.cs
@@ -14,7 +14,7 @@ using Task = System.Threading.Tasks.Task;
 
 namespace Microsoft.Health.Fhir.Tests.E2E.Rest
 {
-    [HttpIntegrationFixtureArgumentSets(DataStore.All, Format.All)]
+    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.All)]
     public class OperationVersionsTests : IClassFixture<HttpIntegrationTestFixture<Startup>>
     {
         private readonly HttpClient _client;
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ReadTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ReadTests.cs
index 3f9c0fcc..02584bb2 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ReadTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ReadTests.cs
@@ -16,7 +16,7 @@ using Task = System.Threading.Tasks.Task;
 
 namespace Microsoft.Health.Fhir.Tests.E2E.Rest
 {
-    [HttpIntegrationFixtureArgumentSets(DataStore.All, Format.All)]
+    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.All)]
     public class ReadTests : IClassFixture<HttpIntegrationTestFixture>
     {
         private readonly TestFhirClient _client;
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/BasicSearchTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/BasicSearchTests.cs
index 7faf45ae..f634f44a 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/BasicSearchTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/BasicSearchTests.cs
@@ -27,7 +27,7 @@ using Task = System.Threading.Tasks.Task;
 
 namespace Microsoft.Health.Fhir.Tests.E2E.Rest.Search
 {
-    [HttpIntegrationFixtureArgumentSets(DataStore.All, Format.Json)]
+    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.Json)]
     public class BasicSearchTests : SearchTestsBase<HttpIntegrationTestFixture>
     {
         public BasicSearchTests(HttpIntegrationTestFixture fixture)
@@ -227,37 +227,6 @@ namespace Microsoft.Health.Fhir.Tests.E2E.Rest.Search
             ValidateBundle(bundle, $"?_type=Patient,Observation&_id={organization.Id}");
         }
 
-        [Fact]
-        [Trait(Traits.Priority, Priority.One)]
-        [HttpIntegrationFixtureArgumentSets(dataStores: DataStore.SqlServer)]
-        public async Task GivenMultiplePagesOfVariousTypesOfResourcesInSql_WhenUsingTypeParameterToSearchForMultipleResourceTypes_ThenCorrectResourcesAreReturned()
-        {
-            // Create various resources.
-            string tag = Guid.NewGuid().ToString();
-            Patient[] patients = await Client.CreateResourcesAsync<Patient>(
-                p => SetPatientInfo(p, "city1", "name1", tag),
-                p => SetPatientInfo(p, "city2", "name2", tag),
-                p => SetPatientInfo(p, "city3", "name3", tag),
-                p => SetPatientInfo(p, "city4", "name4", tag));
-
-            Observation[] observations = await Client.CreateResourcesAsync<Observation>(
-                o => SetObservationInfo(o, tag),
-                o => SetObservationInfo(o, tag));
-
-            List<Resource> expectedResources = new List<Resource>();
-            foreach (Observation observation in observations)
-            {
-                expectedResources.Add(observation);
-            }
-
-            foreach (Patient patient in patients)
-            {
-                expectedResources.Add(patient);
-            }
-
-            await ExecuteAndValidateBundle($"?_type=Patient,Observation&_tag={tag}&_count=3", sort: false, pageSize: 3, expectedResources.ToArray());
-        }
-
         [Fact]
         [Trait(Traits.Priority, Priority.One)]
         [HttpIntegrationFixtureArgumentSets(dataStores: DataStore.CosmosDb)]
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/CanonicalSearchTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/CanonicalSearchTests.cs
index e872e6ce..e0e98ef8 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/CanonicalSearchTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/CanonicalSearchTests.cs
@@ -15,7 +15,7 @@ using Task = System.Threading.Tasks.Task;
 
 namespace Microsoft.Health.Fhir.Tests.E2E.Rest.Search
 {
-    [HttpIntegrationFixtureArgumentSets(DataStore.All, Format.Json)]
+    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.Json)]
     public class CanonicalSearchTests : SearchTestsBase<CanonicalSearchTestFixture>
     {
         private const string _skipReason = "_profile was not supported as a search parameter.";
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/ChainingAndSortTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/ChainingAndSortTests.cs
index 4d6f0b4e..d905dc16 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/ChainingAndSortTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/ChainingAndSortTests.cs
@@ -26,74 +26,5 @@ namespace Microsoft.Health.Fhir.Tests.E2E.Rest.Search
         {
             _client = fixture.TestFhirClient;
         }
-
-        [Fact]
-        [Trait(Traits.Priority, Priority.One)]
-        public async Task GivenAChainedSearchPattern_WhenSearched_ThenCompareTheResultsWithDifferentVariationsOfSortingExpressions()
-        {
-            string requestBundleAsString = Samples.GetJson("Bundle-ChainingAndSortSearchValidation");
-            var parser = new Hl7.Fhir.Serialization.FhirJsonParser();
-            var requestBundle = parser.Parse<Bundle>(requestBundleAsString);
-
-            using FhirResponse<Bundle> fhirResponse = await _client.PostBundleAsync(requestBundle);
-            Assert.NotNull(fhirResponse);
-            Assert.Equal(HttpStatusCode.OK, fhirResponse.StatusCode);
-
-            // Ensure all records were ingested.
-            Assert.Equal(requestBundle.Entry.Count, fhirResponse.Resource.Entry.Count);
-            foreach (Bundle.EntryComponent component in fhirResponse.Resource.Entry)
-            {
-                Assert.NotNull(component.Response.Status);
-                HttpStatusCode httpStatusCode = (HttpStatusCode)Convert.ToInt32(component.Response.Status);
-                Assert.True(httpStatusCode == HttpStatusCode.OK || httpStatusCode == HttpStatusCode.Created);
-            }
-
-            const int totalNumberOfHealthcareServices = 15;             // Total number of healthcare services ingested.
-            const int expectedNumberOfEntriesInFirstPage = 10;          // Max number of entries in the first page.
-            const int expectedNumberOfLinks = 2;                        // Expected number of pages/links.
-            const int totalNumberOfFilteredHealthcareServices = 13;     // Expected number of health care services when filters are applied.
-
-            // Check if all HealthcareServices were properly ingested.
-            Bundle bundleAllHealthcaseServices = await _client.SearchAsync(ResourceType.HealthcareService, "_total=accurate");
-            Assert.Equal(expectedNumberOfEntriesInFirstPage, bundleAllHealthcaseServices.Entry.Count);
-            Assert.Equal(expectedNumberOfLinks, bundleAllHealthcaseServices.Link.Count);
-            Assert.Equal(totalNumberOfHealthcareServices, bundleAllHealthcaseServices.Total.Value);
-
-            string commonQuery = "name:missing=false&_has:PractitionerRole:service:practitioner=2ec3586b-9454-4c7f-8eaf-7a0e64cecf17&active:not=false&location:missing=false&_has:PractitionerRole:service:active=true";
-
-            // Search for a set of Healthcare Services using chain queries and adittional filtering.
-            Bundle bundleWithNoSort = await _client.SearchAsync(ResourceType.HealthcareService, commonQuery);
-            Assert.Equal(expectedNumberOfEntriesInFirstPage, bundleWithNoSort.Entry.Count);
-            Assert.Equal(expectedNumberOfLinks, bundleWithNoSort.Link.Count);
-
-            // [ Reuse the first query ] + Sort records by name.
-            Bundle bundleWithSort = await _client.SearchAsync(ResourceType.HealthcareService, commonQuery + "&_sort=name");
-            Assert.Equal(expectedNumberOfEntriesInFirstPage, bundleWithSort.Entry.Count);
-            Assert.Equal(expectedNumberOfLinks, bundleWithSort.Link.Count);
-
-            // [ Reuse the first query ] + Return only the total count of records.
-            Bundle bundleWithNoSortAndSummaryCount = await _client.SearchAsync(ResourceType.HealthcareService, commonQuery + "&_summary=count");
-            Assert.Empty(bundleWithNoSortAndSummaryCount.Entry);
-            Assert.Empty(bundleWithNoSortAndSummaryCount.Link);
-            Assert.Equal(totalNumberOfFilteredHealthcareServices, bundleWithNoSortAndSummaryCount.Total.Value);
-
-            // [ Reuse the first query ] + Return only the total count of records (with additional _sort expression that will be ignored internally).
-            Bundle bundleWithSortAndSummaryCount = await _client.SearchAsync(ResourceType.HealthcareService, commonQuery + "&_sort=name&_summary=count");
-            Assert.Empty(bundleWithSortAndSummaryCount.Entry);
-            Assert.Empty(bundleWithSortAndSummaryCount.Link);
-            Assert.Equal(totalNumberOfFilteredHealthcareServices, bundleWithSortAndSummaryCount.Total.Value);
-
-            // [ Reuse the first query ] + Get total number of records returned.
-            Bundle bundleWithNoSortAndTotalAccurate = await _client.SearchAsync(ResourceType.HealthcareService, commonQuery + "&_total=accurate");
-            Assert.Equal(expectedNumberOfEntriesInFirstPage, bundleWithNoSortAndTotalAccurate.Entry.Count);
-            Assert.Equal(expectedNumberOfLinks, bundleWithNoSortAndTotalAccurate.Link.Count);
-            Assert.Equal(totalNumberOfFilteredHealthcareServices, bundleWithNoSortAndTotalAccurate.Total.Value);
-
-            // [ Reuse the first query ] + Sort records by name and get total number of records returned.
-            Bundle bundleWithSortAndTotalAccurate = await _client.SearchAsync(ResourceType.HealthcareService, commonQuery + "&_sort=name&_total=accurate");
-            Assert.Equal(expectedNumberOfEntriesInFirstPage, bundleWithSortAndTotalAccurate.Entry.Count);
-            Assert.Equal(expectedNumberOfLinks, bundleWithSortAndTotalAccurate.Link.Count);
-            Assert.Equal(totalNumberOfFilteredHealthcareServices, bundleWithSortAndTotalAccurate.Total.Value);
-        }
     }
 }
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/ChainingSearchTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/ChainingSearchTests.cs
index 8616b732..2338ae82 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/ChainingSearchTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/ChainingSearchTests.cs
@@ -18,7 +18,7 @@ using Task = System.Threading.Tasks.Task;
 
 namespace Microsoft.Health.Fhir.Tests.E2E.Rest.Search
 {
-    [HttpIntegrationFixtureArgumentSets(DataStore.All, Format.Json)]
+    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.Json)]
     public class ChainingSearchTests : SearchTestsBase<ChainingSearchTests.ClassFixture>
     {
         public ChainingSearchTests(ClassFixture fixture)
@@ -158,40 +158,6 @@ namespace Microsoft.Health.Fhir.Tests.E2E.Rest.Search
             ValidateBundle(bundle, Fixture.AdamsPatient, Fixture.SmithPatient, Fixture.TrumanPatient);
         }
 
-        [HttpIntegrationFixtureArgumentSets(DataStore.SqlServer, Format.Json)]
-        [Fact]
-        public async Task GivenANestedReverseChainSearchExpressionOverTheTypeResourceParameter_WhenSearched_ThenCorrectBundleShouldBeReturned()
-        {
-            Bundle bundle = await Client.SearchAsync(ResourceType.Patient, $"_tag={Fixture.Tag}&_has:Group:member:_type=Group");
-
-            Assert.NotEmpty(bundle.Entry);
-
-            bundle = await Client.SearchAsync(ResourceType.Patient, $"_tag={Fixture.Tag}&_has:Group:member:_type=Patient");
-
-            Assert.Empty(bundle.Entry);
-        }
-
-        [HttpIntegrationFixtureArgumentSets(DataStore.SqlServer, Format.Json)]
-        [Fact]
-        public async Task GivenAChainedSearchExpressionWithAPredicateOnSurrogateId_WhenSearched_ThenCorrectBundleShouldBeReturned()
-        {
-            string query = $"subject:Patient._type=Patient&subject:Patient._tag={Fixture.Tag}";
-
-            Bundle completeBundle = await Client.SearchAsync(ResourceType.DiagnosticReport, query);
-            Assert.True(completeBundle.Entry.Count > 2);
-
-            Bundle bundle = await Client.SearchAsync(ResourceType.DiagnosticReport, query, count: 1);
-            List<Bundle.EntryComponent> resources = new List<Bundle.EntryComponent>();
-            resources.AddRange(bundle.Entry);
-            while (bundle.NextLink != null)
-            {
-                bundle = await Client.SearchAsync(bundle.NextLink.ToString());
-                resources.AddRange(bundle.Entry);
-            }
-
-            ValidateBundle(new Bundle { Entry = resources }, completeBundle.Entry.Select(e => e.Resource).ToArray());
-        }
-
         [Fact]
         public async Task GivenAReverseChainedSearchExpressionWithAPredicateOnSurrogateId_WhenSearched_ThenCorrectBundleShouldBeReturned()
         {
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/CompositeSearchTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/CompositeSearchTests.cs
index 42b79b03..35548ece 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/CompositeSearchTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/CompositeSearchTests.cs
@@ -12,7 +12,7 @@ using Task = System.Threading.Tasks.Task;
 
 namespace Microsoft.Health.Fhir.Tests.E2E.Rest.Search
 {
-    [HttpIntegrationFixtureArgumentSets(DataStore.All, Format.Json)]
+    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.Json)]
     public class CompositeSearchTests : SearchTestsBase<CompositeSearchTestFixture>
     {
         private const string ObservationWith1MinuteApgarScore = "ObservationWith1MinuteApgarScore";
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/CustomSearchParamTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/CustomSearchParamTests.cs
index 7e26edec..169ff881 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/CustomSearchParamTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/CustomSearchParamTests.cs
@@ -25,7 +25,7 @@ namespace Microsoft.Health.Fhir.Tests.E2E.Rest.Search
     [CollectionDefinition(Categories.CustomSearch, DisableParallelization = true)]
     [Collection(Categories.CustomSearch)]
     [Trait(Traits.Category, Categories.CustomSearch)]
-    [HttpIntegrationFixtureArgumentSets(DataStore.All, Format.Json)]
+    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.Json)]
     public class CustomSearchParamTests : SearchTestsBase<HttpIntegrationTestFixture>, IAsyncLifetime
     {
         private readonly HttpIntegrationTestFixture _fixture;
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/DateSearchTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/DateSearchTests.cs
index 4c9a27e3..aa17c644 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/DateSearchTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/DateSearchTests.cs
@@ -13,7 +13,7 @@ using Task = System.Threading.Tasks.Task;
 
 namespace Microsoft.Health.Fhir.Tests.E2E.Rest.Search
 {
-    [HttpIntegrationFixtureArgumentSets(DataStore.All, Format.Json)]
+    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.Json)]
     public class DateSearchTests : SearchTestsBase<DateSearchTestFixture>
     {
         public DateSearchTests(DateSearchTestFixture fixture)
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/IncludeSearchTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/IncludeSearchTests.cs
index a6f50a2c..d2306d79 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/IncludeSearchTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/IncludeSearchTests.cs
@@ -17,7 +17,7 @@ using Task = System.Threading.Tasks.Task;
 
 namespace Microsoft.Health.Fhir.Tests.E2E.Rest.Search
 {
-    [HttpIntegrationFixtureArgumentSets(DataStore.All, Format.Json)]
+    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.Json)]
     public class IncludeSearchTests : SearchTestsBase<IncludeSearchTestFixture>
     {
         public IncludeSearchTests(IncludeSearchTestFixture fixture)
@@ -564,794 +564,6 @@ namespace Microsoft.Health.Fhir.Tests.E2E.Rest.Search
 
         // Include Iterate
 
-        [Fact]
-        [HttpIntegrationFixtureArgumentSets(DataStore.SqlServer)]
-        public async Task GivenAnIncludeIterateSearchExpressionWithSingleIteration_WhenSearched_TheIterativeResultsShouldBeAddedToTheBundle()
-        {
-            // Non-recursive iteration- Single iteration (_include:iterate)
-            string query = $"_include=MedicationDispense:prescription&_include:iterate=MedicationRequest:patient&_tag={Fixture.Tag}";
-
-            Bundle bundle = await Client.SearchAsync(ResourceType.MedicationDispense, query);
-
-            ValidateBundle(
-                bundle,
-                Fixture.AdamsMedicationDispense,
-                Fixture.SmithMedicationDispense,
-                Fixture.TrumanMedicationDispenseWithoutRequest,
-                Fixture.AdamsMedicationRequest,
-                Fixture.SmithMedicationRequest,
-                Fixture.AdamsPatient,
-                Fixture.SmithPatient);
-
-            ValidateSearchEntryMode(bundle, ResourceType.MedicationDispense);
-
-            ValidateBundleUrl(Client.HttpClient.BaseAddress, ResourceType.MedicationDispense, query, bundle.Link[0].Url);
-
-            // ensure that the included resources are not counted
-            bundle = await Client.SearchAsync(ResourceType.MedicationDispense, $"{query}&_summary=count");
-            Assert.Equal(3, bundle.Total);
-
-            // ensure that the included resources are not counted when _total is specified and the results fit in a single bundle.
-            bundle = await Client.SearchAsync(ResourceType.MedicationDispense, $"{query}&_total=accurate");
-            Assert.Equal(3, bundle.Total);
-        }
-
-        [Fact]
-        [HttpIntegrationFixtureArgumentSets(DataStore.SqlServer)]
-        public async Task GivenAnIncludeRecurseSearchExpressionWithSingleIteration_WhenSearched_TheIterativeResultsShouldBeAddedToTheBundle()
-        {
-            // Non-recursive iteration- Single iteration (_include:recurse)
-            string query = $"_include=MedicationDispense:prescription&_include:recurse=MedicationRequest:patient&_tag={Fixture.Tag}";
-
-            Bundle bundle = await Client.SearchAsync(ResourceType.MedicationDispense, query);
-
-            ValidateBundle(
-                bundle,
-                Fixture.AdamsMedicationDispense,
-                Fixture.SmithMedicationDispense,
-                Fixture.TrumanMedicationDispenseWithoutRequest,
-                Fixture.AdamsMedicationRequest,
-                Fixture.SmithMedicationRequest,
-                Fixture.AdamsPatient,
-                Fixture.SmithPatient);
-
-            ValidateSearchEntryMode(bundle, ResourceType.MedicationDispense);
-
-            ValidateBundleUrl(Client.HttpClient.BaseAddress, ResourceType.MedicationDispense, query, bundle.Link[0].Url);
-        }
-
-        [Fact]
-        [HttpIntegrationFixtureArgumentSets(DataStore.SqlServer)]
-        public async Task GivenAnIncludeIterateSearchExpressionWithAdditionalParameters_WhenSearched_TheIterativeResultsShouldBeAddedToTheBundle()
-        {
-            // Non-recursive iteration - Single iteration (_include:iterate)
-            string query = $"_include=MedicationDispense:prescription&_include:iterate=MedicationRequest:patient&_id={Fixture.AdamsMedicationDispense.Id}&_tag={Fixture.Tag}";
-
-            Bundle bundle = await Client.SearchAsync(ResourceType.MedicationDispense, query);
-
-            ValidateBundle(
-                bundle,
-                Fixture.AdamsMedicationDispense,
-                Fixture.AdamsMedicationRequest,
-                Fixture.AdamsPatient);
-
-            ValidateSearchEntryMode(bundle, ResourceType.MedicationDispense);
-
-            ValidateBundleUrl(Client.HttpClient.BaseAddress, ResourceType.MedicationDispense, query, bundle.Link[0].Url);
-        }
-
-        [Fact]
-        [HttpIntegrationFixtureArgumentSets(DataStore.SqlServer)]
-        public async Task GivenAnIncludeIterateSearchExpressionWithMultipleIterations_WhenSearched_TheIterativeResultsShouldBeAddedToTheBundle()
-        {
-            // Non-recursive iteration - Multiple iterations
-            string query = $"_include=MedicationDispense:prescription&_include:iterate=MedicationRequest:patient&_include:iterate=Patient:general-practitioner&_include:iterate=Patient:organization&_tag={Fixture.Tag}";
-
-            Bundle bundle = await Client.SearchAsync(ResourceType.MedicationDispense, query);
-
-            ValidateBundle(
-                bundle,
-                Fixture.AdamsMedicationDispense,
-                Fixture.SmithMedicationDispense,
-                Fixture.TrumanMedicationDispenseWithoutRequest,
-                Fixture.AdamsMedicationRequest,
-                Fixture.SmithMedicationRequest,
-                Fixture.AdamsPatient,
-                Fixture.SmithPatient,
-                Fixture.AndersonPractitioner,
-                Fixture.SanchezPractitioner,
-                Fixture.Organization);
-
-            ValidateSearchEntryMode(bundle, ResourceType.MedicationDispense);
-
-            ValidateBundleUrl(Client.HttpClient.BaseAddress, ResourceType.MedicationDispense, query, bundle.Link[0].Url);
-        }
-
-        [Fact]
-        [HttpIntegrationFixtureArgumentSets(DataStore.SqlServer)]
-        public async Task GivenAnIncludeIterateSearchExpressionWithIncludeIterateParametersBeforeIncludeParameters_WhenSearched_TheIterativeResultsShouldBeAddedToTheBundle()
-        {
-            // Non-recursive iteration - Iteration order doesn't matter
-            string query = $"_include:iterate=Patient:organization&_include:iterate=Patient:general-practitioner&_include:iterate=MedicationRequest:patient&_include=MedicationDispense:prescription&_tag={Fixture.Tag}";
-
-            Bundle bundle = await Client.SearchAsync(ResourceType.MedicationDispense, query);
-
-            ValidateBundle(
-                bundle,
-                Fixture.AdamsMedicationDispense,
-                Fixture.SmithMedicationDispense,
-                Fixture.TrumanMedicationDispenseWithoutRequest,
-                Fixture.AdamsMedicationRequest,
-                Fixture.SmithMedicationRequest,
-                Fixture.AdamsPatient,
-                Fixture.SmithPatient,
-                Fixture.AndersonPractitioner,
-                Fixture.SanchezPractitioner,
-                Fixture.Organization);
-
-            ValidateSearchEntryMode(bundle, ResourceType.MedicationDispense);
-
-            ValidateBundleUrl(Client.HttpClient.BaseAddress, ResourceType.MedicationDispense, query, bundle.Link[0].Url);
-        }
-
-        [Fact]
-        [HttpIntegrationFixtureArgumentSets(DataStore.SqlServer)]
-        public async Task GivenAnIncludeIterateSearchExpressionWithMultitypeReference_WhenSearched_TheIterativeResultsShouldBeAddedToTheBundle()
-        {
-            // Non-recursive iteration - Single reference to multiple target types: MedicationRequest:subject could be Patient or Group
-            string query = $"_include=MedicationDispense:prescription&_include:iterate=MedicationRequest:subject&_include:iterate=Patient:general-practitioner&_tag={Fixture.Tag}";
-
-            Bundle bundle = await Client.SearchAsync(ResourceType.MedicationDispense, query);
-
-            ValidateBundle(
-                bundle,
-                Fixture.AdamsMedicationDispense,
-                Fixture.SmithMedicationDispense,
-                Fixture.TrumanMedicationDispenseWithoutRequest,
-                Fixture.AdamsMedicationRequest,
-                Fixture.SmithMedicationRequest,
-                Fixture.AdamsPatient,
-                Fixture.SmithPatient,
-                Fixture.AndersonPractitioner,
-                Fixture.SanchezPractitioner);
-
-            ValidateSearchEntryMode(bundle, ResourceType.MedicationDispense);
-        }
-
-        [Fact]
-        [HttpIntegrationFixtureArgumentSets(DataStore.SqlServer)]
-        public async Task GivenAnIncludeIterateSearchExpressionWithMultitypeArrayReference_WhenSearched_TheIterativeResultsShouldBeAddedToTheBundle()
-        {
-            // Non-recursive iteration - Reference array of multiple target types: CareTeam:participant of type Patient, Practitioner, Organization, etc.
-            string query = $"_include=CareTeam:participant:Patient&_include:iterate=Patient:general-practitioner&_tag={Fixture.Tag}";
-
-            Bundle bundle = await Client.SearchAsync(ResourceType.CareTeam, query);
-
-            ValidateBundle(
-                bundle,
-                Fixture.CareTeam,
-                Fixture.AdamsPatient,
-                Fixture.SmithPatient,
-                Fixture.TrumanPatient,
-                Fixture.AndersonPractitioner,
-                Fixture.SanchezPractitioner,
-                Fixture.TaylorPractitioner);
-
-            ValidateSearchEntryMode(bundle, ResourceType.CareTeam);
-        }
-
-        [Fact]
-        [HttpIntegrationFixtureArgumentSets(DataStore.SqlServer)]
-        public async Task GivenAnIncludeIterateSearchExpressionWithSpecificTargetType_WhenSearched_TheIterativeResultsShouldBeAddedToTheBundle()
-        {
-            // Non-recursive iteration - Specific target type: CareTeam:participant:Patient
-            string query = $"_include=CareTeam:participant:Patient&_include:iterate=Patient:general-practitioner&_tag={Fixture.Tag}";
-
-            Bundle bundle = await Client.SearchAsync(ResourceType.CareTeam, query);
-
-            ValidateBundle(
-                bundle,
-                Fixture.CareTeam,
-                Fixture.AdamsPatient,
-                Fixture.SmithPatient,
-                Fixture.TrumanPatient,
-                Fixture.AndersonPractitioner,
-                Fixture.SanchezPractitioner,
-                Fixture.TaylorPractitioner);
-
-            ValidateSearchEntryMode(bundle, ResourceType.CareTeam);
-        }
-
-        [Fact]
-        [HttpIntegrationFixtureArgumentSets(DataStore.SqlServer)]
-        public async Task GivenAnIncludeIterateSearchExpressionWithMultitypeTargetReferenceWithOverlap_WhenSearched_TheIterativeResultsShouldBeAddedToTheBundle()
-        {
-            // Non-recursive iteration - Multi-type target reference type already included: MedicationDispense:patient and MedicationRequest:subject
-            string query = $"_include=MedicationDispense:patient&_include=MedicationDispense:prescription&_include:iterate=MedicationRequest:subject&_include:iterate=Patient:general-practitioner&_tag={Fixture.Tag}";
-
-            Bundle bundle = await Client.SearchAsync(ResourceType.MedicationDispense, query);
-
-            ValidateBundle(
-                bundle,
-                Fixture.AdamsMedicationDispense,
-                Fixture.SmithMedicationDispense,
-                Fixture.TrumanMedicationDispenseWithoutRequest,
-                Fixture.AdamsMedicationRequest,
-                Fixture.SmithMedicationRequest,
-                Fixture.AdamsPatient,
-                Fixture.SmithPatient,
-                Fixture.TrumanPatient,
-                Fixture.AndersonPractitioner,
-                Fixture.SanchezPractitioner,
-                Fixture.TaylorPractitioner);
-
-            ValidateSearchEntryMode(bundle, ResourceType.MedicationDispense);
-        }
-
-        [Fact]
-        [HttpIntegrationFixtureArgumentSets(DataStore.SqlServer)]
-        public async Task GivenAnIncludeIterateSearchExpressionWithMultipleResultsSets_WhenSearched_TheIterativeResultsShouldBeAddedToTheBundle()
-        {
-            // Non-recursive iteration - Multiple result sets: MedicationDispense:patient and MedicationRequest:patient
-            string query = $"_include=MedicationDispense:patient&_include=MedicationDispense:prescription&_include:iterate=MedicationRequest:patient&_include:iterate=Patient:general-practitioner&_tag={Fixture.Tag}";
-
-            Bundle bundle = await Client.SearchAsync(ResourceType.MedicationDispense, query);
-
-            ValidateBundle(
-                bundle,
-                Fixture.AdamsMedicationDispense,
-                Fixture.SmithMedicationDispense,
-                Fixture.TrumanMedicationDispenseWithoutRequest,
-                Fixture.AdamsMedicationRequest,
-                Fixture.SmithMedicationRequest,
-                Fixture.AdamsPatient,
-                Fixture.SmithPatient,
-                Fixture.TrumanPatient,
-                Fixture.AndersonPractitioner,
-                Fixture.SanchezPractitioner,
-                Fixture.TaylorPractitioner);
-
-            ValidateSearchEntryMode(bundle, ResourceType.MedicationDispense);
-        }
-
-        [Fact]
-        [HttpIntegrationFixtureArgumentSets(DataStore.SqlServer)]
-        public async Task GivenAnIncludeSearchExpressionWithWildcardAndIncludeIterate_WhenSearched_ThenCorrectBundleShouldBeReturned()
-        {
-            string query = $"_tag={Fixture.Tag}&_include=MedicationRequest:*&_include:iterate=Patient:general-practitioner";
-
-            Bundle bundle = await Client.SearchAsync(ResourceType.MedicationRequest, query);
-
-            ValidateBundle(
-                bundle,
-#if R5
-                Fixture.PercocetMedication,
-#endif
-                Fixture.AdamsMedicationRequest,
-                Fixture.SmithMedicationRequest,
-                Fixture.AdamsPatient,
-                Fixture.SmithPatient,
-                Fixture.AndersonPractitioner,
-                Fixture.SanchezPractitioner);
-
-            ValidateSearchEntryMode(bundle, ResourceType.MedicationRequest);
-        }
-
-        [Fact]
-        [HttpIntegrationFixtureArgumentSets(DataStore.SqlServer)]
-        public async Task GivenAnIncludeSearchExpressionWithIncludeWildcardAndIncludeIterateWildcard_WhenSearched_ThenCorrectBundleShouldBeReturned()
-        {
-            string query = $"_tag={Fixture.Tag}&_include=MedicationRequest:*&_include:iterate=Patient:*";
-
-            Bundle bundle = await Client.SearchAsync(ResourceType.MedicationRequest, query);
-
-            ValidateBundle(
-                bundle,
-#if R5
-                Fixture.PercocetMedication,
-#endif
-                Fixture.AdamsMedicationRequest,
-                Fixture.SmithMedicationRequest,
-                Fixture.AdamsPatient,
-                Fixture.SmithPatient,
-                Fixture.AndersonPractitioner,
-                Fixture.SanchezPractitioner,
-                Fixture.Organization);
-
-            ValidateSearchEntryMode(bundle, ResourceType.MedicationRequest);
-        }
-
-        [Fact]
-        [HttpIntegrationFixtureArgumentSets(DataStore.SqlServer)]
-        public async Task GivenAnIncludeSearchExpressionWithIncludeIterateWildcard_WhenSearched_ThenCorrectBundleShouldBeReturned()
-        {
-            string query = $"_tag={Fixture.Tag}&_include=MedicationRequest:patient&_include:iterate=Patient:*";
-
-            Bundle bundle = await Client.SearchAsync(ResourceType.MedicationRequest, query);
-
-            ValidateBundle(
-                bundle,
-                Fixture.AdamsMedicationRequest,
-                Fixture.SmithMedicationRequest,
-                Fixture.AdamsPatient,
-                Fixture.SmithPatient,
-                Fixture.AndersonPractitioner,
-                Fixture.SanchezPractitioner,
-                Fixture.Organization);
-
-            ValidateSearchEntryMode(bundle, ResourceType.MedicationRequest);
-        }
-
-        [Fact]
-        [HttpIntegrationFixtureArgumentSets(DataStore.SqlServer)]
-        public async Task GivenAnIncludeMedication_WhenSearched_TheIterativeResultsShouldBeAddedToTheBundle()
-        {
-            string query = $"_include=MedicationDispense:medication&_tag={Fixture.Tag}";
-
-            Bundle bundle = await Client.SearchAsync(ResourceType.MedicationDispense, query);
-
-            ValidateBundle(
-                bundle,
-#if R5
-                // In R5 Medication is a codeable reference, otherwise, an embedded codebale concept.
-                Fixture.TramadolMedication,
-#endif
-                Fixture.AdamsMedicationDispense,
-                Fixture.SmithMedicationDispense,
-                Fixture.TrumanMedicationDispenseWithoutRequest);
-
-            ValidateSearchEntryMode(bundle, ResourceType.MedicationDispense);
-        }
-
-        // RecInclude Iterate
-        [Fact]
-        [HttpIntegrationFixtureArgumentSets(DataStore.SqlServer)]
-        public async Task GivenARevIncludeIterateSearchExpressionWithSingleIteration_WhenSearched_TheIterativeResultsShouldBeAddedToTheBundle()
-        {
-            // Non-recursive iteration - Single iteration (_revinclude:iterate)
-            string query = $"_revinclude=MedicationRequest:patient&_revinclude:iterate=MedicationDispense:prescription&_tag={Fixture.Tag}";
-
-            Bundle bundle = await Client.SearchAsync(ResourceType.Patient, query);
-
-            ValidateBundle(
-                bundle,
-                Fixture.PatiPatient,
-                Fixture.AdamsPatient,
-                Fixture.SmithPatient,
-                Fixture.TrumanPatient,
-                Fixture.PatientWithDeletedOrganization,
-                Fixture.AdamsMedicationRequest,
-                Fixture.SmithMedicationRequest,
-                Fixture.AdamsMedicationDispense,
-                Fixture.SmithMedicationDispense);
-
-            ValidateSearchEntryMode(bundle, ResourceType.Patient);
-
-            ValidateBundleUrl(Client.HttpClient.BaseAddress, ResourceType.Patient, query, bundle.Link[0].Url);
-
-            // ensure that the included resources are not counted
-            bundle = await Client.SearchAsync(ResourceType.Patient, $"{query}&_summary=count");
-            Assert.Equal(5, bundle.Total);
-
-            // ensure that the included resources are not counted when _total is specified and the results fit in a single bundle.
-            bundle = await Client.SearchAsync(ResourceType.Patient, $"{query}&_total=accurate");
-            Assert.Equal(5, bundle.Total);
-        }
-
-        [Fact]
-        [HttpIntegrationFixtureArgumentSets(DataStore.SqlServer)]
-        public async Task GivenARevIncludeIterateSearchExpressionWithSingleIteration_WhenSearchedAndSorted_TheIterativeResultsShouldBeAddedToTheBundleAsc()
-        {
-            // Non-recursive iteration - Single iteration (_revinclude:iterate)
-            string query = $"_revinclude=MedicationRequest:patient&_revinclude:iterate=MedicationDispense:prescription&_tag={Fixture.Tag}&_sort=birthdate";
-
-            Bundle bundle = await Client.SearchAsync(ResourceType.Patient, query);
-
-            ValidateBundle(
-                bundle,
-                Fixture.PatiPatient,
-                Fixture.AdamsPatient,
-                Fixture.SmithPatient,
-                Fixture.TrumanPatient,
-                Fixture.PatientWithDeletedOrganization,
-                Fixture.AdamsMedicationRequest,
-                Fixture.SmithMedicationRequest,
-                Fixture.AdamsMedicationDispense,
-                Fixture.SmithMedicationDispense);
-
-            ValidateSearchEntryMode(bundle, ResourceType.Patient);
-
-            ValidateBundleUrl(Client.HttpClient.BaseAddress, ResourceType.Patient, query, bundle.Link[0].Url);
-
-            // ensure that the included resources are not counted
-            bundle = await Client.SearchAsync(ResourceType.Patient, $"{query}&_summary=count");
-            Assert.Equal(5, bundle.Total);
-
-            // ensure that the included resources are not counted when _total is specified and the results fit in a single bundle.
-            bundle = await Client.SearchAsync(ResourceType.Patient, $"{query}&_total=accurate");
-            Assert.Equal(5, bundle.Total);
-        }
-
-        [Fact]
-        [HttpIntegrationFixtureArgumentSets(DataStore.SqlServer)]
-        public async Task GivenARevIncludeRecurseSearchExpressionWithSingleIteration_WhenSearched_TheIterativeResultsShouldBeAddedToTheBundle()
-        {
-            // Non-recursive iteration - Single iteration (_revinclude:recurse)
-            string query = $"_revinclude=MedicationRequest:patient&_revinclude:recurse=MedicationDispense:prescription&_tag={Fixture.Tag}";
-
-            Bundle bundle = await Client.SearchAsync(ResourceType.Patient, query);
-
-            ValidateBundle(
-                bundle,
-                Fixture.PatiPatient,
-                Fixture.AdamsPatient,
-                Fixture.SmithPatient,
-                Fixture.TrumanPatient,
-                Fixture.PatientWithDeletedOrganization,
-                Fixture.AdamsMedicationRequest,
-                Fixture.SmithMedicationRequest,
-                Fixture.AdamsMedicationDispense,
-                Fixture.SmithMedicationDispense);
-
-            ValidateSearchEntryMode(bundle, ResourceType.Patient);
-
-            ValidateBundleUrl(Client.HttpClient.BaseAddress, ResourceType.Patient, query, bundle.Link[0].Url);
-        }
-
-        [Fact]
-        [HttpIntegrationFixtureArgumentSets(DataStore.SqlServer)]
-        public async Task GivenARevIncludeIterateSearchExpressionWithAdditionalParameters_WhenSearched_TheIterativeResultsShouldBeAddedToTheBundle()
-        {
-            // Non-recursive iteration - Single iteration (_revinclude:iterate)
-            string query = $"_revinclude=MedicationRequest:patient&_revinclude:iterate=MedicationDispense:prescription&_id={Fixture.AdamsPatient.Id}&_tag={Fixture.Tag}";
-
-            Bundle bundle = await Client.SearchAsync(ResourceType.Patient, query);
-
-            ValidateBundle(
-                bundle,
-                Fixture.AdamsMedicationDispense,
-                Fixture.AdamsMedicationRequest,
-                Fixture.AdamsPatient);
-
-            ValidateSearchEntryMode(bundle, ResourceType.Patient);
-
-            ValidateBundleUrl(Client.HttpClient.BaseAddress, ResourceType.Patient, query, bundle.Link[0].Url);
-        }
-
-#if Stu3
-        // The following tests are enabled only on Stu3 version due to this issue: https://github.com/microsoft/fhir-server/issues/1308
-        [Fact]
-        [HttpIntegrationFixtureArgumentSets(DataStore.SqlServer)]
-        public async Task GivenARevIncludeIterateSearchExpressionWithMultipleIterations_WhenSearched_TheIterativeResultsShouldBeAddedToTheBundle()
-        {
-            // Non-recursive iteration - Multiple iterations
-            string query = $"_revinclude:iterate=MedicationDispense:prescription&_revinclude:iterate=MedicationRequest:patient&_revinclude=Patient:organization&_tag={Fixture.Tag}";
-
-            Bundle bundle = await Client.SearchAsync(ResourceType.Organization, query);
-
-            ValidateBundle(
-                bundle,
-                Fixture.Organization,
-                Fixture.LabAOrganization,
-                Fixture.LabBOrganization,
-                Fixture.LabCOrganization,
-                Fixture.LabDOrganization,
-                Fixture.LabEOrganization,
-                Fixture.LabFOrganization,
-                Fixture.PatiPatient,
-                Fixture.AdamsPatient,
-                Fixture.SmithPatient,
-                Fixture.TrumanPatient,
-                Fixture.AdamsMedicationRequest,
-                Fixture.SmithMedicationRequest,
-                Fixture.AdamsMedicationDispense,
-                Fixture.SmithMedicationDispense);
-
-            ValidateSearchEntryMode(bundle, ResourceType.Organization);
-
-            ValidateBundleUrl(Client.HttpClient.BaseAddress, ResourceType.Organization, query, bundle.Link[0].Url);
-        }
-
-        [Fact]
-        [HttpIntegrationFixtureArgumentSets(DataStore.SqlServer)]
-        public async Task GivenARevIncludeIterateSearchExpressionWithRevIncludeIterateParametersBeforeRevIncludeParameters_WhenSearched_TheIterativeResultsShouldBeAddedToTheBundle()
-        {
-            // Non-recursive iteration - Iteration order doesn't matter
-            string query = $"_revinclude:iterate=MedicationDispense:prescription&_revinclude:iterate=MedicationRequest:patient&_revinclude=Patient:organization&_tag={Fixture.Tag}";
-
-            Bundle bundle = await Client.SearchAsync(ResourceType.Organization, query);
-
-            ValidateBundle(
-                bundle,
-                Fixture.AdamsMedicationDispense,
-                Fixture.SmithMedicationDispense,
-                Fixture.AdamsMedicationRequest,
-                Fixture.SmithMedicationRequest,
-                Fixture.PatiPatient,
-                Fixture.AdamsPatient,
-                Fixture.SmithPatient,
-                Fixture.TrumanPatient,
-                Fixture.Organization,
-                Fixture.LabAOrganization,
-                Fixture.LabBOrganization,
-                Fixture.LabCOrganization,
-                Fixture.LabDOrganization,
-                Fixture.LabEOrganization,
-                Fixture.LabFOrganization);
-
-            ValidateSearchEntryMode(bundle, ResourceType.Organization);
-
-            ValidateBundleUrl(Client.HttpClient.BaseAddress, ResourceType.Organization, query, bundle.Link[0].Url);
-        }
-#endif
-
-        [Fact]
-        [HttpIntegrationFixtureArgumentSets(DataStore.SqlServer)]
-        public async Task GivenARevIncludeIterateSearchExpressionWithMultiTypeReferenceSpecifiedTarget_WhenSearched_TheIterativeResultsShouldBeAddedToTheBundle()
-        {
-            // Non-recursive iteration - Single reference to multiple target types: MedicationRequest:subject could be Patient or Group
-            string query = $"_revinclude:iterate=MedicationDispense:prescription&_revinclude:iterate=MedicationRequest:subject:Patient&_revinclude=Patient:general-practitioner&_tag={Fixture.Tag}";
-
-            Bundle bundle = await Client.SearchAsync(ResourceType.Practitioner, query);
-
-            ValidateBundle(
-                bundle,
-                Fixture.AdamsMedicationDispense,
-                Fixture.SmithMedicationDispense,
-                Fixture.AdamsMedicationRequest,
-                Fixture.SmithMedicationRequest,
-                Fixture.PatiPatient,
-                Fixture.AdamsPatient,
-                Fixture.SmithPatient,
-                Fixture.TrumanPatient,
-                Fixture.PatientWithDeletedOrganization,
-                Fixture.AndersonPractitioner,
-                Fixture.SanchezPractitioner,
-                Fixture.TaylorPractitioner,
-                Fixture.Practitioner);
-
-            ValidateSearchEntryMode(bundle, ResourceType.Practitioner);
-        }
-
-        [Fact]
-        [HttpIntegrationFixtureArgumentSets(DataStore.SqlServer)]
-        public async Task GivenARevIncludeIterateSearchExpressionWithMultitypeArrayReference_WhenSearched_TheIterativeResultsShouldBeAddedToTheBundle()
-        {
-            // Non-recursive iteration - Reference array of multiple target types: CareTeam:participant of type Patient, Practitioner, Organization, etc.
-            // CareTeam:participant is a circular reference, however CareTeam:participant:Patient isn't, so we're not expecting an informational Issue
-            string query = $"_revinclude:iterate=CareTeam:participant:Patient&_revinclude=Patient:general-practitioner&_tag={Fixture.Tag}";
-
-            Bundle bundle = await Client.SearchAsync(ResourceType.Practitioner, query);
-
-            ValidateBundle(
-                bundle,
-                Fixture.AndersonPractitioner,
-                Fixture.SanchezPractitioner,
-                Fixture.TaylorPractitioner,
-                Fixture.Practitioner,
-                Fixture.PatiPatient,
-                Fixture.AdamsPatient,
-                Fixture.SmithPatient,
-                Fixture.TrumanPatient,
-                Fixture.PatientWithDeletedOrganization,
-                Fixture.CareTeam);
-
-            ValidateSearchEntryMode(bundle, ResourceType.Practitioner);
-        }
-
-        [Fact]
-        [HttpIntegrationFixtureArgumentSets(DataStore.SqlServer)]
-        public async Task GivenARevIncludeIterateSearchExpressionWithMultipleResultsSets_WhenSearched_TheIterativeResultsShouldBeAddedToTheBundle()
-        {
-            // Non-recursive iteration - Multiple result sets: MedicationDispense:performer:Practitioner and MedicationRequest:requester:Practitioner
-            string query = $"_include=MedicationDispense:performer:Practitioner&_include=MedicationDispense:prescription&_include:iterate=MedicationRequest:requester:Practitioner&_revinclude:iterate=Patient:general-practitioner:Practitioner&_tag={Fixture.Tag}";
-
-            Bundle bundle = await Client.SearchAsync(ResourceType.MedicationDispense, query);
-
-            ValidateBundle(
-                bundle,
-                Fixture.AdamsMedicationDispense,
-                Fixture.SmithMedicationDispense,
-                Fixture.TrumanMedicationDispenseWithoutRequest,
-                Fixture.Practitioner,
-                Fixture.AdamsMedicationRequest,
-                Fixture.SmithMedicationRequest,
-                Fixture.AndersonPractitioner,
-                Fixture.SanchezPractitioner,
-                Fixture.AdamsPatient,
-                Fixture.SmithPatient,
-                Fixture.PatientWithDeletedOrganization,
-                Fixture.PatiPatient);
-
-            ValidateSearchEntryMode(bundle, ResourceType.MedicationDispense);
-        }
-
-        [Fact]
-        [HttpIntegrationFixtureArgumentSets(DataStore.SqlServer)]
-        public async Task GivenARevIncludeIterateSearchExpressionWithMultipleResultsSetsWithoutSpecificRevIncludeIterateTargetType_WhenSearched_ShouldThrowBadRequestExceptionWithIssue()
-        {
-            // Non-recursive iteration - Multiple result sets: MedicationDispense:performer;Practitioner and MedicationRequest:requester:Practitioner
-            string query = $"_include=MedicationDispense:performer:Practitioner&_include=MedicationDispense:prescription&_include:iterate=MedicationRequest:requester:Practitioner&_revinclude:iterate=Patient:general-practitioner&_tag={Fixture.Tag}";
-
-            using var fhirException = await Assert.ThrowsAsync<FhirException>(async () => await Client.SearchAsync(ResourceType.MedicationDispense, query));
-            Assert.Equal(HttpStatusCode.BadRequest, fhirException.StatusCode);
-
-            string[] expectedDiagnostics = { string.Format(Core.Resources.RevIncludeIterateTargetTypeNotSpecified, "Patient:general-practitioner") };
-            IssueSeverity[] expectedIssueSeverities = { IssueSeverity.Error };
-            IssueType[] expectedCodeTypes = { IssueType.Invalid };
-            ValidateOperationOutcome(expectedDiagnostics, expectedIssueSeverities, expectedCodeTypes, fhirException.OperationOutcome);
-        }
-
-        [Fact]
-        [HttpIntegrationFixtureArgumentSets(DataStore.SqlServer)]
-        public async Task GivenARevIncludeMedication_WhenSearched_TheIterativeResultsShouldBeAddedToTheBundle()
-        {
-            string query = $"_revinclude=MedicationDispense:medication&_tag={Fixture.Tag}";
-
-            Bundle bundle = await Client.SearchAsync(ResourceType.Medication, query);
-
-            ValidateBundle(
-                bundle,
-#if R5
-                // In R5 Medication is a codeable reference, otherwise, an embedded codebale concept.
-                Fixture.AdamsMedicationDispense,
-                Fixture.SmithMedicationDispense,
-                Fixture.TrumanMedicationDispenseWithoutRequest,
-#endif
-                Fixture.TramadolMedication,
-                Fixture.PercocetMedication);
-
-            ValidateSearchEntryMode(bundle, ResourceType.Medication);
-        }
-
-#if Stu3
-        // This test is enabled only on Stu3 version due to this issue: https://github.com/microsoft/fhir-server/issues/1308
-        [Fact]
-        [HttpIntegrationFixtureArgumentSets(DataStore.SqlServer)]
-        public async Task GivenARevIncludeIterateSearchExpressionWithRevIncludeWildCard_WhenSearched_TheIterativeResultsShouldBeAddedToTheBundle()
-        {
-            string query = $"_revinclude=Patient:*&_revinclude:iterate=MedicationRequest:patient&_tag={Fixture.Tag}";
-
-            Bundle bundle = await Client.SearchAsync(ResourceType.Practitioner, query);
-
-            ValidateBundle(
-                bundle,
-                Fixture.AndersonPractitioner,
-                Fixture.SanchezPractitioner,
-                Fixture.TaylorPractitioner,
-                Fixture.Practitioner,
-                Fixture.PatiPatient,
-                Fixture.AdamsPatient,
-                Fixture.SmithPatient,
-                Fixture.TrumanPatient,
-                Fixture.PatientWithDeletedOrganization,
-                Fixture.AdamsMedicationRequest,
-                Fixture.SmithMedicationRequest);
-
-            ValidateSearchEntryMode(bundle, ResourceType.Practitioner);
-        }
-#endif
-
-        [Fact]
-        [HttpIntegrationFixtureArgumentSets(DataStore.SqlServer)]
-        public async Task GivenARevIncludeIterateSearchExpressionWithRevIncludeIterateWildCard_WhenSearched_TheIterateWildcardShouldBeIgnored()
-        {
-            string query = $"_revinclude:iterate=MedicationRequest:*&_revinclude=Patient:general-practitioner&_tag={Fixture.Tag}";
-
-            Bundle bundle = await Client.SearchAsync(ResourceType.Practitioner, query);
-
-            ValidateBundle(
-                bundle,
-                Fixture.AndersonPractitioner,
-                Fixture.SanchezPractitioner,
-                Fixture.TaylorPractitioner,
-                Fixture.Practitioner,
-                Fixture.PatiPatient,
-                Fixture.PatientWithDeletedOrganization,
-                Fixture.AdamsPatient,
-                Fixture.SmithPatient,
-                Fixture.TrumanPatient);
-
-            ValidateSearchEntryMode(bundle, ResourceType.Practitioner);
-        }
-
-        [Fact]
-        [HttpIntegrationFixtureArgumentSets(DataStore.SqlServer)]
-        public async Task GivenARevIncludeIterateSearchExpressionWithRevIncludeWildcardAndRevIncludeIterateWildcard_WhenSearched_TheIterateWildcardShouldBeIgnored()
-        {
-            string query = $"_revinclude:iterate=MedicationDispense:*&_revinclude=MedicationRequest:*&_tag={Fixture.Tag}";
-
-            Bundle bundle = await Client.SearchAsync(ResourceType.Patient, query);
-
-            ValidateBundle(
-                bundle,
-                Fixture.AdamsMedicationRequest,
-                Fixture.SmithMedicationRequest,
-                Fixture.PatiPatient,
-                Fixture.AdamsPatient,
-                Fixture.SmithPatient,
-                Fixture.TrumanPatient,
-                Fixture.PatientWithDeletedOrganization);
-
-            ValidateSearchEntryMode(bundle, ResourceType.Patient);
-        }
-
-        // Circular Reference - Iteration executed once
-
-        [Fact]
-        [HttpIntegrationFixtureArgumentSets(DataStore.SqlServer)]
-        public async Task GivenAnIncludeIterateSearchExpressionWithCircularReference_WhenSearched_SingleIterationIsExecutedAndInformationalIssueIsAdded()
-        {
-            // Recursive queries (circular references) are not supported (see https://github.com/microsoft/fhir-server/issues/1310)
-            // Here we expect a single iteration of included results
-            string query = $"_include:iterate=Organization:partof&_id={Fixture.LabAOrganization.Id}&_tag={Fixture.Tag}";
-
-            Bundle bundle = await Client.SearchAsync(ResourceType.Organization, query);
-
-            // Create OperationOutcome with Informational Issue
-            var issue = new IssueComponent
-            {
-                Code = IssueType.Informational,
-                Diagnostics = string.Format(Core.Resources.IncludeIterateCircularReferenceExecutedOnce, "_include:iterate", "Organization:partof"),
-                Severity = IssueSeverity.Information,
-            };
-
-            var operationOutcome = new OperationOutcome
-            {
-                Id = bundle.Id,
-                Issue = new List<OperationOutcome.IssueComponent> { issue },
-            };
-
-            ValidateBundle(
-                bundle,
-                operationOutcome,
-                Fixture.LabAOrganization,
-                Fixture.LabBOrganization);
-
-            var expectedSearchEntryModes = new Dictionary<string, Bundle.SearchEntryMode>
-            {
-                { Fixture.LabAOrganization.Id, Bundle.SearchEntryMode.Match },
-                { Fixture.LabBOrganization.Id, Bundle.SearchEntryMode.Include },
-            };
-        }
-
-        [Fact]
-        [HttpIntegrationFixtureArgumentSets(DataStore.SqlServer)]
-        public async Task GivenARevIncludeIterateSearchExpressionWithCircularReference_WhenSearched_SingleIterationIsExecutedAndInformationalIssueIsAdded()
-        {
-            // Recursive include iterate queries (circular references) are not supported (see https://github.com/microsoft/fhir-server/issues/1310)
-            // Here we expect a single iteration of included results
-            string query = $"_revinclude:iterate=Organization:partof&_id={Fixture.LabBOrganization.Id}&_tag={Fixture.Tag}";
-
-            Bundle bundle = await Client.SearchAsync(ResourceType.Organization, query);
-
-            // Create OperationOutcome with Informational Issue
-            var issue = new IssueComponent
-            {
-                Code = IssueType.Informational,
-                Diagnostics = string.Format(Core.Resources.IncludeIterateCircularReferenceExecutedOnce, "_revinclude:iterate", "Organization:partof"),
-                Severity = IssueSeverity.Information,
-            };
-
-            var operationOutcome = new OperationOutcome
-            {
-                Id = bundle.Id,
-                Issue = new List<OperationOutcome.IssueComponent> { issue },
-            };
-
-            ValidateBundle(
-                bundle,
-                operationOutcome,
-                Fixture.LabAOrganization,
-                Fixture.LabBOrganization);
-
-            var expectedSearchEntryModes = new Dictionary<string, Bundle.SearchEntryMode>
-            {
-                { Fixture.LabBOrganization.Id, Bundle.SearchEntryMode.Match },
-                { Fixture.LabAOrganization.Id, Bundle.SearchEntryMode.Include },
-            };
-        }
-
         // This will not work for circular reference
         private static void ValidateSearchEntryMode(Bundle bundle, ResourceType matchResourceType)
         {
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/NumberSearchTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/NumberSearchTests.cs
index d1688cbc..25809c82 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/NumberSearchTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/NumberSearchTests.cs
@@ -11,7 +11,7 @@ using Task = System.Threading.Tasks.Task;
 
 namespace Microsoft.Health.Fhir.Tests.E2E.Rest.Search
 {
-    [HttpIntegrationFixtureArgumentSets(DataStore.All, Format.Json)]
+    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.Json)]
     public class NumberSearchTests : SearchTestsBase<NumberSearchTestFixture>
     {
         public NumberSearchTests(NumberSearchTestFixture fixture)
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/QuantitySearchTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/QuantitySearchTests.cs
index 22335f46..fe5d152b 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/QuantitySearchTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/QuantitySearchTests.cs
@@ -11,7 +11,7 @@ using Task = System.Threading.Tasks.Task;
 
 namespace Microsoft.Health.Fhir.Tests.E2E.Rest.Search
 {
-    [HttpIntegrationFixtureArgumentSets(DataStore.All, Format.Json)]
+    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.Json)]
     public class QuantitySearchTests : SearchTestsBase<QuantitySearchTestFixture>
     {
         public QuantitySearchTests(QuantitySearchTestFixture fixture)
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/ReferenceSearchTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/ReferenceSearchTests.cs
index 18b153df..eebe3000 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/ReferenceSearchTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/ReferenceSearchTests.cs
@@ -11,7 +11,7 @@ using Task = System.Threading.Tasks.Task;
 
 namespace Microsoft.Health.Fhir.Tests.E2E.Rest.Search
 {
-    [HttpIntegrationFixtureArgumentSets(DataStore.All, Format.Json)]
+    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.Json)]
     public class ReferenceSearchTests : SearchTestsBase<ReferenceSearchTestFixture>
     {
         public ReferenceSearchTests(ReferenceSearchTestFixture fixture)
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/SortTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/SortTests.cs
index a953ce42..b0b996a7 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/SortTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/SortTests.cs
@@ -22,7 +22,7 @@ using Task = System.Threading.Tasks.Task;
 
 namespace Microsoft.Health.Fhir.Tests.E2E.Rest.Search
 {
-    [HttpIntegrationFixtureArgumentSets(DataStore.All, Format.Json)]
+    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.Json)]
     public class SortTests : SearchTestsBase<HttpIntegrationTestFixture>
     {
         private static readonly string _unsupportedSearchAndSortParam = "abcd1234"; // Parameter is invalid search parameter, therefore it is invalid sort parameter as well.
@@ -75,18 +75,6 @@ namespace Microsoft.Health.Fhir.Tests.E2E.Rest.Search
             await ExecuteAndValidateBundle($"Patient?_tag={tag}&_sort=-{sortParameterName}", false, patients.Reverse().Cast<Resource>().ToArray());
         }
 
-        [Theory]
-        [InlineData("birthdate")]
-        [InlineData("-birthdate")]
-        [HttpIntegrationFixtureArgumentSets(dataStores: DataStore.SqlServer)]
-        public async Task GivenPatientsWithSameBirthdateAndMultiplePages_WhenSortedByBirthdate_ThenPatientsAreReturnedInCorrectOrder(string sortParameterName)
-        {
-            var tag = Guid.NewGuid().ToString();
-            var patients = await CreatePatientsWithSameBirthdate(tag);
-
-            await ExecuteAndValidateBundle($"Patient?_tag={tag}&_sort={sortParameterName}&_count=3", false, pageSize: 3, patients);
-        }
-
         [SkippableFact]
         [HttpIntegrationFixtureArgumentSets(dataStores: DataStore.CosmosDb)]
         public async Task GivenPatientsWithSameBirthdateAndMultiplePages_WhenSortedByBirthdate_ThenPatientsAreReturnedInAscendingOrder()
@@ -327,254 +315,6 @@ namespace Microsoft.Health.Fhir.Tests.E2E.Rest.Search
             await ExecuteAndValidateBundle($"Patient?_tag={tag}&family={filteredFamilyName}&_sort=-birthdate", false, patients.Where(x => x.Name[0].Family == filteredFamilyName).OrderByDescending(x => x.BirthDate).Cast<Resource>().ToArray());
         }
 
-        [Fact]
-        [HttpIntegrationFixtureArgumentSets(dataStores: DataStore.SqlServer)]
-        public async Task GivenQueryWithRevinclude_WhenSearchedWithSortParamOnDatetime_ThenResourcesAreReturnedInAscendingOrder()
-        {
-            var tag = Guid.NewGuid().ToString();
-
-            var resources = new List<Resource>();
-
-            // create the resources which will have an timestamp bigger than the 'now' var
-            var patients = await CreatePatients(tag);
-
-            resources.AddRange(patients);
-
-            foreach (Patient p in patients)
-            {
-                var obs = await AddObservationToPatient(p, "1990-01-01", tag);
-                resources.AddRange(obs);
-            }
-
-            // Ask to get all patient with specific tag order by birthdate (timestamp)
-            // filter and sort are different based on different types
-            await ExecuteAndValidateBundle($"Patient?_tag={tag}&_sort=birthdate&_revinclude=Observation:subject", false, resources.ToArray());
-        }
-
-        [Fact]
-        [HttpIntegrationFixtureArgumentSets(dataStores: DataStore.SqlServer)]
-        public async Task GivenQueryWithRevinclude_WhenSearchedWithSortParamOnLastupdated_ThenResourcesAreReturnedInAscendingOrder()
-        {
-            var tag = Guid.NewGuid().ToString();
-
-            var resources = new List<Resource>();
-
-            // create the resources which will have an timestamp bigger than the 'now' var
-            var patients = await CreatePatients(tag);
-
-            var observations = new List<Observation>();
-            for (int i = 0; i < patients.Length; i++)
-            {
-                var obs = await AddObservationToPatient(patients[i], "1990-01-01", tag);
-                observations.Add(obs.First());
-            }
-
-            resources.AddRange(patients);
-            resources.AddRange(observations);
-
-            // Ask to get all patient with specific tag order by birthdate (timestamp)
-            // filter and sort are different based on different types
-            await ExecuteAndValidateBundle($"Patient?_tag={tag}&_sort=_lastUpdated&_revinclude=Observation:subject", false, resources.ToArray());
-        }
-
-        [Fact]
-        [HttpIntegrationFixtureArgumentSets(dataStores: DataStore.SqlServer)]
-        public async Task GivenQueryWithRevinclude_WhenSearchedWithSortParamOnLastupdatedWithHyphen_ThenResourcesAreReturnedInDescendingOrder()
-        {
-            var tag = Guid.NewGuid().ToString();
-
-            var resources = new List<Resource>();
-
-            // create the resources which will have an timestamp bigger than the 'now' var
-            var patients = await CreatePatients(tag);
-
-            var observations = new List<Observation>();
-            for (int i = 0; i < patients.Length; i++)
-            {
-                var obs = await AddObservationToPatient(patients[i], "1990-01-01", tag);
-                observations.Add(obs.First());
-            }
-
-            resources.AddRange(patients.Reverse());
-            observations.Reverse();
-            resources.AddRange(observations);
-
-            // Ask to get all patient with specific tag order by birthdate (timestamp)
-            // filter and sort are different based on different types
-            await ExecuteAndValidateBundle($"Patient?_tag={tag}&_sort=-_lastUpdated&_revinclude=Observation:subject", false, resources.ToArray());
-        }
-
-        [Fact]
-        [HttpIntegrationFixtureArgumentSets(dataStores: DataStore.SqlServer)]
-        public async Task GivenQueryWithRevinclude_WhenSearchedWithSortParamOnDatetimeWithHyphen_ThenResourcesAreReturnedInDescendingOrder()
-        {
-            var tag = Guid.NewGuid().ToString();
-
-            var resources = new List<Resource>();
-
-            // create the resources which will have an timestamp bigger than the 'now' var
-            var patients = await CreatePatients(tag);
-
-            var observations = new List<Observation>();
-            for (int i = 0; i < patients.Length; i++)
-            {
-                var obs = await AddObservationToPatient(patients[i], "1990-01-01", tag);
-                observations.Add(obs.First());
-            }
-
-            resources.AddRange(patients.Reverse());
-            resources.AddRange(observations);
-
-            // Ask to get all patient with specific tag order by birthdate (timestamp)
-            // filter and sort are different based on different types
-            await ExecuteAndValidateBundle($"Patient?_tag={tag}&_sort=-birthdate&_revinclude=Observation:subject", false, resources.ToArray());
-        }
-
-        [Fact]
-        [HttpIntegrationFixtureArgumentSets(dataStores: DataStore.SqlServer)]
-        public async Task GivenQueryWithObservationInclude_WhenSearchedWithSortParamOnDatetime_ThenResourcesAreReturnedInAscendingOrder()
-        {
-            var tag = Guid.NewGuid().ToString();
-
-            var resources = new List<Resource>();
-
-            // create the resources which will have an timestamp bigger than the 'now' var
-            var patients = await CreatePatients(tag);
-
-            var dates = new string[] { "1990-01-01", "1991-01-01", "1992-01-01", "1993-01-01" };
-            var observations = new List<Observation>();
-            for (int i = 0; i < patients.Length; i++)
-            {
-                var obs = await AddObservationToPatient(patients[i], dates[i], tag);
-                observations.Add(obs.First());
-            }
-
-            resources.AddRange(observations);
-            resources.AddRange(patients);
-
-            // Ask to get all patient with specific tag order by birthdate (timestamp)
-            // filter and sort are different based on different types
-            await ExecuteAndValidateBundle($"Observation?_tag={tag}&_sort=date&_include=Observation:subject", false, resources.ToArray());
-        }
-
-        [Fact]
-        [HttpIntegrationFixtureArgumentSets(dataStores: DataStore.SqlServer)]
-        public async Task GivenQueryWithObservationInclude_WhenSearchedWithSortParamOnDatetimeWithHyphen_ThenResourcesAreReturnedInDescendingOrder()
-        {
-            var tag = Guid.NewGuid().ToString();
-
-            var resources = new List<Resource>();
-
-            // create the resources which will have an timestamp bigger than the 'now' var
-            var patients = await CreatePatients(tag);
-
-            var dates = new string[] { "1990-01-01", "1991-01-01", "1992-01-01", "1993-01-01" };
-            var observations = new List<Observation>();
-            for (int i = 0; i < patients.Length; i++)
-            {
-                var obs = await AddObservationToPatient(patients[i], dates[i], tag);
-                observations.Add(obs.First());
-            }
-
-            observations.Reverse();
-            resources.AddRange(observations);
-            resources.AddRange(patients);
-
-            // Ask to get all patient with specific tag order by birthdate (timestamp)
-            // filter and sort are different based on different types
-            await ExecuteAndValidateBundle($"Observation?_tag={tag}&_sort=-date&_include=Observation:subject", false, resources.ToArray());
-        }
-
-        [Fact]
-        [HttpIntegrationFixtureArgumentSets(dataStores: DataStore.SqlServer)]
-        public async Task GivenQueryWithObservation_WhenSearchedForItemsWithSubjectAndSort_ThenResourcesAreReturnedInAscendingOrder()
-        {
-            var tag = Guid.NewGuid().ToString();
-
-            var expected_resources = new List<Resource>();
-
-            // create the resources which will have an timestamp bigger than the 'now' var
-            var patients = await CreatePatients(tag);
-
-            var dates = new string[] { "1990-01-01", "1991-01-01", "1992-01-01", "1993-01-01" };
-            var observations = new List<Observation>();
-            for (int i = 0; i < patients.Length; i++)
-            {
-                var obs = await AddObservationToPatient(patients[i], dates[i], tag);
-                observations.Add(obs.First());
-            }
-
-            // Add observation with no patient-> no subject, but we don't keep it in the expected result set.
-            // observations.Add(AddObservationToPatient(null, dates[0], tag).Result.First());
-            await AddObservationToPatient(null, dates[0], tag);
-
-            expected_resources.AddRange(observations);
-
-            // Get observations
-            await ExecuteAndValidateBundle($"Observation?_tag={tag}&_sort=date&subject:missing=false", false, expected_resources.ToArray());
-        }
-
-        [Fact]
-        [HttpIntegrationFixtureArgumentSets(dataStores: DataStore.SqlServer)]
-        public async Task GivenQueryWithObservation_WhenSearchedForItemsWithNoSubjectAndSort_ThenResourcesAreReturnedInAscendingOrder()
-        {
-            var tag = Guid.NewGuid().ToString();
-
-            var expected_resources = new List<Resource>();
-
-            // create the resources which will have an timestamp bigger than the 'now' var
-            var patients = await CreatePatients(tag);
-
-            var dates = new string[] { "1990-01-01", "1991-01-01", "1992-01-01", "1993-01-01" };
-            var observations = new List<Observation>();
-            for (int i = 0; i < patients.Length; i++)
-            {
-                var obs = await AddObservationToPatient(patients[i], dates[i], tag);
-                observations.Add(obs.First());
-            }
-
-            // Add observation with no patient-> no subject, and we keep it alone in the expected result set.
-            expected_resources.Add(AddObservationToPatient(null, dates[0], tag).Result.First());
-
-            // Get observations
-            await ExecuteAndValidateBundle($"Observation?_tag={tag}&_sort=date&subject:missing=true", false, expected_resources.ToArray());
-        }
-
-        [Fact]
-        [HttpIntegrationFixtureArgumentSets(dataStores: DataStore.SqlServer)]
-        public async Task GivenQueryWithObservation_WhenSearchedForItemsWithNoSubjectAndLastUpdatedSort_ThenResourcesAreReturnedInAscendingOrder()
-        {
-            var tag = Guid.NewGuid().ToString();
-
-            var expected_resources = new List<Resource>();
-
-            // create the resources which will have an timestamp bigger than the 'now' var
-            var patients = await CreatePatients(tag);
-
-            var dates = new string[] { "1990-01-01", "1991-01-01", "1992-01-01", "1993-01-01" };
-            var observations = new List<Observation>();
-            for (int i = 0; i < patients.Length; i++)
-            {
-                var obs = await AddObservationToPatient(patients[i], dates[i], tag);
-                observations.Add(obs.First());
-            }
-
-            // Add observation with no patient-> no subject, and we keep it alone in the expected result set.
-            expected_resources.Add(AddObservationToPatient(null, dates[0], tag).Result.First());
-
-            // Get observations
-            await ExecuteAndValidateBundle($"Observation?_tag={tag}&_sort=_lastUpdated&subject:missing=true", false, expected_resources.ToArray());
-        }
-
-        [SkippableFact]
-        public async Task GivenPatientsWithMultipleNames_WhenFilteringAndSortingByFamilyName_ThenResourcesAreReturnedInAscendingOrder()
-        {
-            var tag = Guid.NewGuid().ToString();
-            var patients = await CreatePatientsWithMultipleFamilyNames(tag);
-
-            await ExecuteAndValidateBundle($"Patient?_tag={tag}&family=R&_sort=family", sort: false, patients[0..5]);
-        }
-
         [SkippableTheory]
         [InlineData(2)]
         [InlineData(3)]
@@ -598,31 +338,6 @@ namespace Microsoft.Health.Fhir.Tests.E2E.Rest.Search
             await ExecuteAndValidateBundle($"Patient?_tag={tag}&family=R&_sort=-family", sort: false, expectedPatients.ToArray());
         }
 
-        [SkippableFact]
-        [HttpIntegrationFixtureArgumentSets(dataStores: DataStore.SqlServer)]
-        public async Task GivenPatientsWithMultipleNamesForSql_WhenFilteringAndSortingByFamilyNameWithHyphen_ThenResourcesAreReturnedInAscendingOrder()
-        {
-            var tag = Guid.NewGuid().ToString();
-            Patient[] patients = await CreatePatientsWithMultipleFamilyNames(tag);
-
-            List<Patient> expectedPatients = new List<Patient>() { patients[4], patients[1], patients[2], patients[3], patients[0], };
-            await ExecuteAndValidateBundle($"Patient?_tag={tag}&family=R&_sort=-family", sort: false, expectedPatients.ToArray());
-        }
-
-        [SkippableTheory]
-        [InlineData(2)]
-        [InlineData(3)]
-        [InlineData(4)]
-        [HttpIntegrationFixtureArgumentSets(dataStores: DataStore.SqlServer)]
-        public async Task GivenPatientsWithMultipleNamesAndPaginatedForSql_WhenFilteringAndSortingByFamilyNameWithHyphen_ThenResourcesAreReturnedInAscendingOrder(int count)
-        {
-            var tag = Guid.NewGuid().ToString();
-            Patient[] patients = await CreatePatientsWithMultipleFamilyNames(tag);
-
-            List<Patient> expectedPatients = new List<Patient>() { patients[4], patients[1], patients[2], patients[3], patients[0], };
-            await ExecuteAndValidateBundle($"Patient?_tag={tag}&family=R&_sort=-family&_count={count}", sort: false, pageSize: count, expectedPatients.ToArray());
-        }
-
         /*
          * There is a difference in the way we break ties between Cosmos and SQL.
          * For Cosmos, we choose the resource based on last updated time ordered by overall sort order.
@@ -666,30 +381,6 @@ namespace Microsoft.Health.Fhir.Tests.E2E.Rest.Search
             await ExecuteAndValidateBundle($"Patient?_tag={tag}&_sort=family&_count={count}", sort: false, pageSize: count, expectedPatients);
         }
 
-        [SkippableTheory]
-        [InlineData(2)]
-        [InlineData(3)]
-        [InlineData(4)]
-        [HttpIntegrationFixtureArgumentSets(dataStores: DataStore.SqlServer)]
-        public async Task GivenPatientsWithFamilyNameMissingAndPaginatedForSql_WhenSortingByFamilyNameWithHyphen_ThenThosePatientsAreIncludedInResult(int count)
-        {
-            var tag = Guid.NewGuid().ToString();
-            Patient[] patients = await CreatePatientsWithMissingFamilyNames(tag);
-
-            var expectedPatients = new Patient[]
-                {
-                    patients[0],
-                    patients[4],
-                    patients[6],
-                    patients[5],
-                    patients[1],
-                    patients[2],
-                    patients[3],
-                };
-
-            await ExecuteAndValidateBundle($"Patient?_tag={tag}&_sort=-family&_count={count}", sort: false, pageSize: count, expectedPatients);
-        }
-
         /*
          * There is a difference in the way we break ties between Cosmos and SQL.
          * For Cosmos, we choose the resource based on overall sort order.
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/StringSearchTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/StringSearchTests.cs
index c2a2293b..fb42195b 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/StringSearchTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/StringSearchTests.cs
@@ -11,7 +11,7 @@ using Task = System.Threading.Tasks.Task;
 
 namespace Microsoft.Health.Fhir.Tests.E2E.Rest.Search
 {
-    [HttpIntegrationFixtureArgumentSets(DataStore.All, Format.Json)]
+    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.Json)]
     public class StringSearchTests : SearchTestsBase<StringSearchTestFixture>
     {
         public StringSearchTests(StringSearchTestFixture fixture)
@@ -108,22 +108,6 @@ namespace Microsoft.Health.Fhir.Tests.E2E.Rest.Search
             ValidateBundle(bundle, Fixture.Patients[0]);
         }
 
-        [HttpIntegrationFixtureArgumentSets(DataStore.SqlServer, Format.Json)]
-        [Theory]
-        [Trait(Traits.Priority, Priority.One)]
-        [InlineData("muller")]
-        [InlineData("müller")]
-        public async Task GivenAStringSearchParamWithAccentAndAResourceWithAccent_WhenSearched_ThenCorrectBundleShouldBeReturned(string searchText)
-        {
-            string query = $"name={searchText}&_total=accurate&_tag={Fixture.FixtureTag}";
-
-            Bundle bundle = await Client.SearchAsync(ResourceType.Patient, query);
-
-            Assert.NotNull(bundle);
-            Assert.Equal(2, bundle.Total);
-            Assert.NotEmpty(bundle.Entry);
-        }
-
         [Fact]
         public async Task GivenAEscapedStringSearchParams_WhenSearched_ThenCorrectBundleShouldBeReturned()
         {
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/TokenSearchTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/TokenSearchTests.cs
index 7443f0b3..57d08159 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/TokenSearchTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/TokenSearchTests.cs
@@ -11,7 +11,7 @@ using Task = System.Threading.Tasks.Task;
 
 namespace Microsoft.Health.Fhir.Tests.E2E.Rest.Search
 {
-    [HttpIntegrationFixtureArgumentSets(DataStore.All, Format.Json)]
+    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.Json)]
     public class TokenSearchTests : SearchTestsBase<TokenSearchTestFixture>
     {
         public static readonly object[][] TokenSearchParameterData = new[]
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/UriSearchTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/UriSearchTests.cs
index 7723bbf0..328dfc5d 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/UriSearchTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/Search/UriSearchTests.cs
@@ -12,7 +12,7 @@ using Task = System.Threading.Tasks.Task;
 
 namespace Microsoft.Health.Fhir.Tests.E2E.Rest.Search
 {
-    [HttpIntegrationFixtureArgumentSets(DataStore.All, Format.Json)]
+    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.Json)]
     public class UriSearchTests : SearchTestsBase<UriSearchTestFixture>
     {
         public UriSearchTests(UriSearchTestFixture fixture)
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/TransactionTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/TransactionTests.cs
index eb0de48d..98806795 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/TransactionTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/TransactionTests.cs
@@ -42,328 +42,5 @@ namespace Microsoft.Health.Fhir.Tests.E2E.Rest
             using FhirException ex = await Assert.ThrowsAsync<FhirException>(() => _client.PostBundleAsync(Samples.GetDefaultTransaction().ToPoco<Bundle>()));
             Assert.Equal(HttpStatusCode.MethodNotAllowed, ex.StatusCode);
         }
-
-        [Fact]
-        [Trait(Traits.Priority, Priority.One)]
-        public async Task GivenAProperBundle_WhenSubmittingATransaction_ThenSuccessIsReturnedWithExpectedStatusCodesPerRequests()
-        {
-            var id = Guid.NewGuid().ToString();
-
-            // Insert resources first inorder to test a delete.
-            var resource = Samples.GetJsonSample<Patient>("PatientWithMinimalData");
-            resource.Identifier[0].Value = id;
-            using FhirResponse<Patient> response = await _client.CreateAsync(resource);
-
-            var insertedId = response.Resource.Id;
-            var bundleAsString = Samples.GetJson("Bundle-TransactionWithAllValidRoutes");
-            bundleAsString = bundleAsString.Replace("http:/example.org/fhir/ids|234234", $"http:/example.org/fhir/ids|{id}");
-            bundleAsString = bundleAsString.Replace("234235", Guid.NewGuid().ToString());
-            bundleAsString = bundleAsString.Replace("456456", Guid.NewGuid().ToString());
-
-            var parser = new Hl7.Fhir.Serialization.FhirJsonParser();
-            var requestBundle = parser.Parse<Bundle>(bundleAsString);
-
-            requestBundle.Entry.Add(new EntryComponent
-            {
-                Request = new RequestComponent
-                {
-                    Method = HTTPVerb.DELETE,
-                    Url = "Patient/" + insertedId,
-                },
-            });
-
-            using FhirResponse<Bundle> fhirResponse = await _client.PostBundleAsync(requestBundle);
-            Assert.NotNull(fhirResponse);
-            Assert.Equal(HttpStatusCode.OK, fhirResponse.StatusCode);
-
-            Assert.True("201".Equals(fhirResponse.Resource.Entry[0].Response.Status), "Create");
-            Assert.True("201".Equals(fhirResponse.Resource.Entry[1].Response.Status), "Conditional Create");
-            Assert.True("201".Equals(fhirResponse.Resource.Entry[2].Response.Status), "Update");
-            Assert.True("201".Equals(fhirResponse.Resource.Entry[3].Response.Status), "Conditional Update");
-            Assert.True("200".Equals(fhirResponse.Resource.Entry[4].Response.Status), "Get");
-            Assert.True("200".Equals(fhirResponse.Resource.Entry[5].Response.Status), "Get");
-            Assert.True("204".Equals(fhirResponse.Resource.Entry[6].Response.Status), "Delete");
-        }
-
-        [Fact]
-        [Trait(Traits.Priority, Priority.One)]
-        public async Task GivenABundleWithInvalidRoutes_WhenSubmittingATransaction_ThenBadRequestExceptionIsReturnedWithProperOperationOutCome()
-        {
-            var requestBundle = Samples.GetJsonSample("Bundle-TransactionWithInvalidProcessingRoutes");
-
-            using var fhirException = await Assert.ThrowsAsync<FhirException>(async () => await _client.PostBundleAsync(requestBundle.ToPoco<Bundle>()));
-            Assert.Equal(HttpStatusCode.BadRequest, fhirException.StatusCode);
-
-            string[] expectedDiagnostics = { "Requested operation 'Patient?identifier=123456' is not supported using DELETE." };
-            IssueType[] expectedCodeType = { IssueType.Invalid };
-            ValidateOperationOutcome(expectedDiagnostics, expectedCodeType, fhirException.OperationOutcome);
-        }
-
-        [Fact]
-        [Trait(Traits.Priority, Priority.One)]
-        public async Task GivenAProperTransactionBundle_WhenTransactionExecutionFails_ThenTransactionIsRolledBackAndProperOperationOutComeIsReturned()
-        {
-            var requestBundle = Samples.GetJsonSample("Bundle-TransactionForRollBack").ToPoco<Bundle>();
-
-            // Make the criteria unique so that the tests behave consistently
-            var getIdGuid = Guid.NewGuid().ToString();
-            requestBundle.Entry[1].Request.Url = requestBundle.Entry[1].Request.Url + getIdGuid;
-
-            using var fhirException = await Assert.ThrowsAsync<FhirException>(async () => await _client.PostBundleAsync(requestBundle));
-            Assert.Equal(HttpStatusCode.NotFound, fhirException.StatusCode);
-
-            string[] expectedDiagnostics = { "Transaction failed on 'GET' for the requested url '/" + requestBundle.Entry[1].Request.Url + "'.", "Resource type 'Patient' with id '12345" + getIdGuid + "' couldn't be found." };
-            IssueType[] expectedCodeType = { OperationOutcome.IssueType.Processing, OperationOutcome.IssueType.NotFound };
-            ValidateOperationOutcome(expectedDiagnostics, expectedCodeType, fhirException.OperationOutcome);
-
-            // Validate that transaction has rolledback
-            Bundle bundle = await _client.SearchAsync(ResourceType.Patient, "family=ADHI");
-            Assert.Empty(bundle.Entry);
-        }
-
-        [Fact]
-        [Trait(Traits.Priority, Priority.One)]
-        public async Task GivenABundleWithMutipleEntriesReferringToSameResource_WhenSubmittingATransaction_ThenProperOperationOutComeIsReturned()
-        {
-            var id = Guid.NewGuid().ToString();
-
-            // Insert resources first inorder to test a delete.
-            var resource = Samples.GetJsonSample<Patient>("PatientWithMinimalData");
-            resource.Identifier[0].Value = id;
-            using FhirResponse<Patient> response = await _client.CreateAsync(resource);
-
-            var bundleAsString = Samples.GetJson("Bundle-TransactionWithConditionalReferenceReferringToSameResource");
-            bundleAsString = bundleAsString.Replace("http:/example.org/fhir/ids|234234", $"http:/example.org/fhir/ids|{id}");
-            var parser = new Hl7.Fhir.Serialization.FhirJsonParser();
-            var bundle = parser.Parse<Bundle>(bundleAsString);
-
-            using var fhirException = await Assert.ThrowsAsync<FhirException>(async () => await _client.PostBundleAsync(bundle));
-            Assert.Equal(HttpStatusCode.BadRequest, fhirException.StatusCode);
-
-            string[] expectedDiagnostics = { $"Bundle contains multiple entries that refers to the same resource 'Patient?identifier=http:/example.org/fhir/ids|{id}'." };
-            IssueType[] expectedCodeType = { OperationOutcome.IssueType.Invalid };
-            ValidateOperationOutcome(expectedDiagnostics, expectedCodeType, fhirException.OperationOutcome);
-        }
-
-        [Fact]
-        [Trait(Traits.Priority, Priority.One)]
-        [Trait(Traits.Category, Categories.Authorization)]
-        public async Task GivenAValidBundleWithUnauthorizedUser_WhenSubmittingATransaction_ThenOperationOutcomeWithUnAuthorizedStatusIsReturned()
-        {
-            TestFhirClient tempClient = _client.CreateClientForClientApplication(TestApplications.WrongAudienceClient);
-            var requestBundle = Samples.GetJsonSample("Bundle-TransactionWithValidBundleEntry");
-
-            using var fhirException = await Assert.ThrowsAsync<FhirException>(async () => await tempClient.PostBundleAsync(requestBundle.ToPoco<Bundle>()));
-            Assert.Equal(HttpStatusCode.Unauthorized, fhirException.StatusCode);
-
-            string[] expectedDiagnostics = { "Authentication failed." };
-            IssueType[] expectedCodeType = { OperationOutcome.IssueType.Login };
-            ValidateOperationOutcome(expectedDiagnostics, expectedCodeType, fhirException.OperationOutcome);
-        }
-
-        [Fact]
-        [Trait(Traits.Priority, Priority.One)]
-        [Trait(Traits.Category, Categories.Authorization)]
-        public async Task GivenAValidBundleWithForbiddenUser_WhenSubmittingATransaction_ThenOperationOutcomeWithForbiddenStatusIsReturned()
-        {
-            TestFhirClient tempClient = _client.CreateClientForUser(TestUsers.ReadOnlyUser, TestApplications.NativeClient);
-
-            var id = Guid.NewGuid().ToString();
-            var bundleAsString = Samples.GetJson("Bundle-TransactionWithValidBundleEntry");
-            bundleAsString = bundleAsString.Replace("identifier=234234", $"identifier={id}");
-            var parser = new Hl7.Fhir.Serialization.FhirJsonParser();
-            var requestBundle = parser.Parse<Bundle>(bundleAsString);
-
-            using var fhirException = await Assert.ThrowsAsync<FhirException>(async () => await tempClient.PostBundleAsync(requestBundle));
-            Assert.Equal(HttpStatusCode.Forbidden, fhirException.StatusCode);
-
-            string[] expectedDiagnostics = { "Transaction failed on 'POST' for the requested url '/Patient'.", "Authorization failed." };
-            IssueType[] expectedCodeType = { OperationOutcome.IssueType.Processing, OperationOutcome.IssueType.Forbidden };
-            ValidateOperationOutcome(expectedDiagnostics, expectedCodeType, fhirException.OperationOutcome);
-        }
-
-        [Fact]
-        [Trait(Traits.Priority, Priority.One)]
-        public async Task GivenABundleWithInvalidConditionalReferenceInResourceBody_WhenSubmittingATransaction_ThenProperOperationOutComeIsReturned()
-        {
-            string patientId = Guid.NewGuid().ToString();
-
-            var observation = new Observation
-            {
-                Subject = new ResourceReference
-                {
-                    Reference = "Patient?identifier=http:/example.org/fhir/ids|" + patientId,
-                },
-            };
-
-            var bundle = new Bundle
-            {
-                Type = BundleType.Transaction,
-                Entry = new List<EntryComponent>
-                {
-                    new EntryComponent
-                    {
-                        Resource = observation,
-                        Request = new RequestComponent
-                        {
-                            Method = HTTPVerb.POST,
-                            Url = "Observation",
-                        },
-                    },
-                },
-            };
-
-            using var fhirException = await Assert.ThrowsAsync<FhirException>(async () => await _client.PostBundleAsync(bundle));
-
-            Assert.Equal(HttpStatusCode.BadRequest, fhirException.StatusCode);
-
-            string[] expectedDiagnostics = { "Given conditional reference 'Patient?identifier=http:/example.org/fhir/ids|" + patientId + "' does not resolve to a resource." };
-            IssueType[] expectedCodeType = { IssueType.Invalid };
-            ValidateOperationOutcome(expectedDiagnostics, expectedCodeType, fhirException.OperationOutcome);
-        }
-
-        private static void ValidateOperationOutcome(string[] expectedDiagnostics, IssueType[] expectedCodeType, OperationOutcome operationOutcome)
-        {
-            Assert.NotNull(operationOutcome?.Id);
-            Assert.NotEmpty(operationOutcome?.Issue);
-
-            Assert.Equal(expectedCodeType.Length, operationOutcome.Issue.Count);
-            Assert.Equal(expectedDiagnostics.Length, operationOutcome.Issue.Count);
-
-            for (int iter = 0; iter < operationOutcome.Issue.Count; iter++)
-            {
-                Assert.Equal(expectedCodeType[iter], operationOutcome.Issue[iter].Code);
-                Assert.Equal(OperationOutcome.IssueSeverity.Error, operationOutcome.Issue[iter].Severity);
-                Assert.Equal(expectedDiagnostics[iter], operationOutcome.Issue[iter].Diagnostics);
-            }
-        }
-
-        [Fact]
-        [Trait(Traits.Priority, Priority.One)]
-        public async Task GivenABundleWithForeignReferenceInResourceBody_WhenSubmittingATransaction_ThenReferenceShouldNotBeResolvedAndProcessShouldSucceed()
-        {
-            var requestBundle = Samples.GetJsonSample("Bundle-TransactionWithForeignReferenceInResourceBody");
-
-            using FhirResponse<Bundle> fhirResponse = await _client.PostBundleAsync(requestBundle.ToPoco<Bundle>());
-
-            Assert.NotNull(fhirResponse);
-            Assert.Equal(HttpStatusCode.OK, fhirResponse.StatusCode);
-
-            foreach (var entry in fhirResponse.Resource.Entry)
-            {
-                IEnumerable<ResourceReference> references = entry.Resource.GetAllChildren<ResourceReference>();
-                foreach (var reference in references)
-                {
-                    // Asserting the conditional reference value before resolution
-                    Assert.Equal("urn:uuid:4a089b8a-b0a0-46a9-92da-c8b653aa2e73", reference.Reference);
-                }
-            }
-        }
-
-        [Fact]
-        [Trait(Traits.Priority, Priority.One)]
-        public async Task GivenATransactionBundleReferencesInResourceBody_WhenSuccessfulExecution_ReferencesAreResolvedCorrectlyAsync()
-        {
-            var id = Guid.NewGuid().ToString();
-
-            // Insert a resource that has a predefined identifier.
-            var resource = Samples.GetJsonSample<Patient>("PatientWithMinimalData");
-            resource.Identifier[0].Value = id;
-            await _client.CreateAsync(resource);
-
-            var bundleAsString = Samples.GetJson("Bundle-TransactionWithReferenceInResourceBody");
-            bundleAsString = bundleAsString.Replace("http:/example.org/fhir/ids|234234", $"http:/example.org/fhir/ids|{id}");
-            var parser = new Hl7.Fhir.Serialization.FhirJsonParser();
-            var bundle = parser.Parse<Bundle>(bundleAsString);
-
-            using FhirResponse<Bundle> fhirResponseForReferenceResolution = await _client.PostBundleAsync(bundle);
-
-            Assert.NotNull(fhirResponseForReferenceResolution);
-            Assert.Equal(HttpStatusCode.OK, fhirResponseForReferenceResolution.StatusCode);
-
-            foreach (var entry in fhirResponseForReferenceResolution.Resource.Entry)
-            {
-                IEnumerable<ResourceReference> references = entry.Resource.GetAllChildren<ResourceReference>();
-
-                foreach (var reference in references)
-                {
-                    // Asserting the conditional reference value after resolution
-                    Assert.True(reference.Reference.Contains("/", StringComparison.Ordinal));
-
-                    // Also asserting that the conditional reference is resolved correctly
-                    Assert.False(reference.Reference.Contains("?", StringComparison.Ordinal));
-                }
-            }
-        }
-
-        [Fact]
-        [Trait(Traits.Priority, Priority.One)]
-        public async Task GivenATransactionWithConditionalCreateAndReference_WhenExecutedASecondTime_ReferencesAreResolvedCorrectlyAsync()
-        {
-            var bundleWithConditionalReference = Samples.GetJsonSample("Bundle-TransactionWithConditionalCreateAndReference");
-
-            var bundle = bundleWithConditionalReference.ToPoco<Bundle>();
-            var patient = bundle.Entry.First().Resource.ToResourceElement().ToPoco<Patient>();
-            var patientIdentifier = Guid.NewGuid().ToString();
-
-            patient.Identifier.First().Value = patientIdentifier;
-            bundle.Entry.First().Request.IfNoneExist = $"identifier=|{patientIdentifier}";
-
-            FhirResponse<Bundle> bundleResponse1 = await _client.PostBundleAsync(bundle);
-
-            var patientId = bundleResponse1.Resource.Entry.First().Resource.Id;
-            ValidateReferenceToPatient(bundleResponse1.Resource.Entry[1].Resource, patientId);
-
-            FhirResponse<Bundle> bundleResponse2 = await _client.PostBundleAsync(bundle);
-            ValidateReferenceToPatient(bundleResponse2.Resource.Entry[1].Resource, patientId);
-        }
-
-        [Fact]
-        [Trait(Traits.Priority, Priority.One)]
-        public async Task GivenATransactionWithConditionalUpdateAndReference_WhenExecutedASecondTime_ReferencesAreResolvedCorrectlyAsync()
-        {
-            var bundleWithConditionalReference = Samples.GetJsonSample("Bundle-TransactionWithConditionalUpdateAndReference");
-
-            var bundle = bundleWithConditionalReference.ToPoco<Bundle>();
-            var patient = bundle.Entry.First().Resource.ToResourceElement().ToPoco<Patient>();
-            var patientIdentifier = Guid.NewGuid().ToString();
-
-            patient.Identifier.First().Value = patientIdentifier;
-            bundle.Entry.First().Request.Url = $"Patient?identifier=|{patientIdentifier}";
-
-            FhirResponse<Bundle> bundleResponse1 = await _client.PostBundleAsync(bundle);
-
-            var patientId = bundleResponse1.Resource.Entry.First().Resource.Id;
-            ValidateReferenceToPatient(bundleResponse1.Resource.Entry[1].Resource, patientId);
-
-            patient.Text = new Narrative
-            {
-                Status = Narrative.NarrativeStatus.Generated,
-                Div = $"<div>Content Updated</div>",
-            };
-
-            FhirResponse<Bundle> bundleResponse2 = await _client.PostBundleAsync(bundle);
-
-            Assert.Equal(patientId, bundleResponse2.Resource.Entry[0].Resource.Id);
-            Assert.Equal("2", bundleResponse2.Resource.Entry[0].Resource.Meta.VersionId);
-            ValidateReferenceToPatient(bundleResponse2.Resource.Entry[1].Resource, patientId);
-        }
-
-        private static void ValidateReferenceToPatient(Resource resource, string patientId)
-        {
-            IEnumerable<ResourceReference> imagingStudyReferences = resource.GetAllChildren<ResourceReference>();
-            bool foundReference = false;
-
-            foreach (var reference in imagingStudyReferences)
-            {
-                if (reference.Reference.StartsWith("Patient"))
-                {
-                    Assert.Equal($"Patient/{patientId}", reference.Reference);
-                    foundReference = true;
-                }
-            }
-
-            Assert.True(foundReference, "Patient reference wasn't found.");
-        }
     }
 }
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/UpdateTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/UpdateTests.cs
index 797152db..e3611bbf 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/UpdateTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/UpdateTests.cs
@@ -22,7 +22,7 @@ namespace Microsoft.Health.Fhir.Tests.E2E.Rest
     /// <summary>
     /// This class covers update tests
     /// </summary>
-    [HttpIntegrationFixtureArgumentSets(DataStore.All, Format.All)]
+    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.All)]
     public partial class UpdateTests : IClassFixture<HttpIntegrationTestFixture>
     {
         private readonly TestFhirClient _client;
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/VReadTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/VReadTests.cs
index 8c269bf3..4cce3f59 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/VReadTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/VReadTests.cs
@@ -17,7 +17,7 @@ using Task = System.Threading.Tasks.Task;
 
 namespace Microsoft.Health.Fhir.Tests.E2E.Rest
 {
-    [HttpIntegrationFixtureArgumentSets(DataStore.All, Format.All)]
+    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.All)]
     public class VReadTests : IClassFixture<HttpIntegrationTestFixture>
     {
         private readonly TestFhirClient _client;
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ValidateTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ValidateTests.cs
index c2f6593b..40d915a5 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ValidateTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.E2E/Rest/ValidateTests.cs
@@ -20,7 +20,7 @@ using Xunit;
 namespace Microsoft.Health.Fhir.Tests.E2E.Rest
 {
     [Trait(Traits.Category, Categories.Validate)]
-    [HttpIntegrationFixtureArgumentSets(DataStore.All, Format.Json)]
+    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.Json)]
     public class ValidateTests : IClassFixture<ValidateTestFixture>
     {
         private const string Success = "All OK";
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.Integration/Features/Operations/FhirOperationDataStoreExportTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.Integration/Features/Operations/FhirOperationDataStoreExportTests.cs
index c5295aaa..d55deed4 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.Integration/Features/Operations/FhirOperationDataStoreExportTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.Integration/Features/Operations/FhirOperationDataStoreExportTests.cs
@@ -47,19 +47,6 @@ namespace Microsoft.Health.Fhir.Tests.Integration.Features.Operations
             return Task.CompletedTask;
         }
 
-        [Fact]
-        [FhirStorageTestsFixtureArgumentSets(DataStore.SqlServer)]
-        public async Task ReturnExportRegisteredInOldSchema()
-        {
-            var jobRecord = new ExportJobRecord(_exportRequest.RequestUri, _exportRequest.RequestType, ExportFormatTags.ResourceName, _exportRequest.ResourceType, null, "hash", rollingFileSizeInMB: 64);
-            var raw = JsonConvert.SerializeObject(jobRecord);
-            var jobId = jobRecord.Id;
-            await _fixture.SqlHelper.ExecuteSqlCmd("INSERT INTO dbo.ExportJob (Id, Hash, Status, RawJobRecord) SELECT '" + jobId + "', 'test', 'Queued', '" + raw + "'");
-            var outcome = await _operationDataStore.GetExportJobByIdAsync(jobId, CancellationToken.None);
-            Assert.NotNull(outcome);
-            Assert.Equal(jobId, outcome.JobRecord.Id);
-        }
-
         [Fact]
         public async Task GivenANewExportRequest_WhenCreatingAnExportJob_ThenAnExportJobGetsCreated()
         {
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.Integration/Persistence/FhirStorageTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.Integration/Persistence/FhirStorageTests.cs
index a3759225..f5b21607 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.Integration/Persistence/FhirStorageTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.Integration/Persistence/FhirStorageTests.cs
@@ -517,106 +517,6 @@ namespace Microsoft.Health.Fhir.Tests.Integration.Persistence
             Assert.Equal(saveResult.RawResourceElement.Id, updateResult.RawResourceElement.Id);
         }
 
-        [Fact]
-        [FhirStorageTestsFixtureArgumentSets(DataStore.SqlServer)]
-        public async Task GivenATransactionHandler_WhenATransactionIsCommitted_ThenTheResourceShouldBeCreated()
-        {
-            string createdId = string.Empty;
-
-            using (ITransactionScope transactionScope = _fixture.TransactionHandler.BeginTransaction())
-            {
-                SaveOutcome saveResult = await Mediator.UpsertResourceAsync(Samples.GetJsonSample("Weight"));
-                createdId = saveResult.RawResourceElement.Id;
-
-                Assert.NotEqual(string.Empty, createdId);
-
-                transactionScope.Complete();
-            }
-
-            ResourceElement getResult = (await Mediator.GetResourceAsync(new ResourceKey<Observation>(createdId))).ToResourceElement(_deserializer);
-
-            Assert.Equal(createdId, getResult.Id);
-        }
-
-        [Fact]
-        [FhirStorageTestsFixtureArgumentSets(DataStore.SqlServer)]
-        public async Task GivenACompletedTransaction_WhenStartingASecondTransactionCommitted_ThenTheResourceShouldBeCreated()
-        {
-            string createdId1;
-            string createdId2;
-
-            using (ITransactionScope transactionScope = _fixture.TransactionHandler.BeginTransaction())
-            {
-                SaveOutcome saveResult = await Mediator.UpsertResourceAsync(Samples.GetJsonSample("Weight"));
-                createdId1 = saveResult.RawResourceElement.Id;
-
-                Assert.NotEqual(string.Empty, createdId1);
-
-                transactionScope.Complete();
-            }
-
-            using (ITransactionScope transactionScope = _fixture.TransactionHandler.BeginTransaction())
-            {
-                SaveOutcome saveResult = await Mediator.UpsertResourceAsync(Samples.GetJsonSample("Weight"));
-                createdId2 = saveResult.RawResourceElement.Id;
-
-                Assert.NotEqual(string.Empty, createdId2);
-
-                transactionScope.Complete();
-            }
-
-            ResourceElement getResult1 = (await Mediator.GetResourceAsync(new ResourceKey<Observation>(createdId1))).ToResourceElement(_deserializer);
-            Assert.Equal(createdId1, getResult1.Id);
-
-            ResourceElement getResult2 = (await Mediator.GetResourceAsync(new ResourceKey<Observation>(createdId2))).ToResourceElement(_deserializer);
-            Assert.Equal(createdId2, getResult2.Id);
-        }
-
-        [Fact]
-        [FhirStorageTestsFixtureArgumentSets(DataStore.SqlServer)]
-        public async Task GivenATransactionHandler_WhenATransactionIsNotCommitted_ThenNothingShouldBeCreated()
-        {
-            string createdId = string.Empty;
-
-            using (_ = _fixture.TransactionHandler.BeginTransaction())
-            {
-                SaveOutcome saveResult = await Mediator.UpsertResourceAsync(Samples.GetJsonSample("Weight"));
-                createdId = saveResult.RawResourceElement.Id;
-
-                Assert.NotEqual(string.Empty, createdId);
-            }
-
-            await Assert.ThrowsAsync<ResourceNotFoundException>(
-                async () => { await Mediator.GetResourceAsync(new ResourceKey<Observation>(createdId)); });
-        }
-
-        [Fact]
-        [FhirStorageTestsFixtureArgumentSets(DataStore.SqlServer)]
-        public async Task GivenATransactionHandler_WhenATransactionFailsFailedRequest_ThenNothingShouldCommit()
-        {
-            string createdId = string.Empty;
-            string randomNotFoundId = Guid.NewGuid().ToString();
-
-            await Assert.ThrowsAsync<ResourceNotFoundException>(
-                async () =>
-                {
-                    using (ITransactionScope transactionScope = _fixture.TransactionHandler.BeginTransaction())
-                    {
-                        SaveOutcome saveResult = await Mediator.UpsertResourceAsync(Samples.GetJsonSample("Weight"));
-                        createdId = saveResult.RawResourceElement.Id;
-
-                        Assert.NotEqual(string.Empty, createdId);
-
-                        await Mediator.GetResourceAsync(new ResourceKey<Observation>(randomNotFoundId));
-
-                        transactionScope.Complete();
-                    }
-                });
-
-            await Assert.ThrowsAsync<ResourceNotFoundException>(
-                async () => { await Mediator.GetResourceAsync(new ResourceKey<Observation>(createdId)); });
-        }
-
         [Fact]
         public async Task GivenAnUpdatedResource_WhenUpdatingSearchParameterIndexAsync_ThenResourceMetadataIsUnchanged()
         {
@@ -907,14 +807,6 @@ namespace Microsoft.Health.Fhir.Tests.Integration.Persistence
             }
         }
 
-        [Fact]
-        [FhirStorageTestsFixtureArgumentSets(DataStore.SqlServer)]
-        public async Task GivenResourceWrapperWithEmptyRawResource_WhenUpserting_ThenExceptionisThrown()
-        {
-            var wrapper = CreateObservationResourceWrapper("obsId1", true);
-            await Assert.ThrowsAsync<ServiceUnavailableException>(() => _fixture.DataStore.UpsertAsync(wrapper, null, true, true, CancellationToken.None));
-        }
-
         private static void VerifyReindexedResource(ResourceWrapper original, ResourceWrapper replaceResult)
         {
             Assert.Equal(original.ResourceId, replaceResult.ResourceId);
diff --git a/test/Microsoft.Health.Fhir.Shared.Tests.Integration/Persistence/SqlServerTransactionScopeTests.cs b/test/Microsoft.Health.Fhir.Shared.Tests.Integration/Persistence/SqlServerTransactionScopeTests.cs
index 250900b6..bea622ce 100644
--- a/test/Microsoft.Health.Fhir.Shared.Tests.Integration/Persistence/SqlServerTransactionScopeTests.cs
+++ b/test/Microsoft.Health.Fhir.Shared.Tests.Integration/Persistence/SqlServerTransactionScopeTests.cs
@@ -27,90 +27,6 @@ namespace Microsoft.Health.Fhir.Tests.Integration.Persistence
             _fixture = fixture;
         }
 
-        [Fact]
-        public async Task GivenATransactionScope_WhenReading_TheUncommittedValuesShouldOnlyBeAvailableWithTheTransactionAndWithHints()
-        {
-            var newId = Guid.NewGuid().ToString();
-            var searchParamHash = new string("RandomSearchParam").ComputeHash();
-
-            using (var transactionScope = _fixture.SqlTransactionHandler.BeginTransaction())
-            {
-                using (SqlConnectionWrapper connectionWrapperWithTransaction = await _fixture.SqlConnectionWrapperFactory.ObtainSqlConnectionWrapperAsync(CancellationToken.None, true))
-                using (SqlCommandWrapper sqlCommandWrapper = connectionWrapperWithTransaction.CreateRetrySqlCommand())
-                {
-                    sqlCommandWrapper.CommandText = @"
-                        INSERT INTO Resource
-                        VALUES(97, @newId, 1, 0, 5095719085917680000, 0, null, CAST('test' AS VARBINARY(MAX)), 0, @searchParamHash)";
-
-                    sqlCommandWrapper.Parameters.Add(new SqlParameter { ParameterName = "newId", Value = newId });
-                    sqlCommandWrapper.Parameters.Add(new SqlParameter { ParameterName = "searchParamHash", Value = searchParamHash });
-
-                    await sqlCommandWrapper.ExecuteNonQueryAsync(CancellationToken.None);
-                }
-
-                // Within the same transaction, the resource should be found
-                using (SqlConnectionWrapper connectionWrapperWithTransaction = await _fixture.SqlConnectionWrapperFactory.ObtainSqlConnectionWrapperAsync(CancellationToken.None, true))
-                {
-                    await VerifyCommandResults(connectionWrapperWithTransaction, newId, true);
-                }
-
-                // Outside of the transaction, the resource should not be found
-                using (SqlConnectionWrapper connectionWrapperWithTransaction = await _fixture.SqlConnectionWrapperFactory.ObtainSqlConnectionWrapperAsync(CancellationToken.None, false))
-                {
-                    await VerifyCommandResults(connectionWrapperWithTransaction, newId, false);
-                }
-
-                // Outside of the transaction, but with the readuncommitted hint, the resource should be found.
-                using (SqlConnectionWrapper connectionWrapperWithTransaction = await _fixture.SqlConnectionWrapperFactory.ObtainSqlConnectionWrapperAsync(CancellationToken.None, false))
-                {
-                    await VerifyCommandResults(connectionWrapperWithTransaction, newId, true, "WITH (READUNCOMMITTED)");
-                }
-            }
-
-            // Outside of the transactionscope, the resource should not be found
-            using (SqlConnectionWrapper connectionWrapperWithTransaction = await _fixture.SqlConnectionWrapperFactory.ObtainSqlConnectionWrapperAsync(CancellationToken.None, false))
-            {
-                await VerifyCommandResults(connectionWrapperWithTransaction, newId, false);
-            }
-
-            // Outside of the transactionscope, but with the readuncommitted hint, the resource should not be found
-            using (SqlConnectionWrapper connectionWrapperWithTransaction = await _fixture.SqlConnectionWrapperFactory.ObtainSqlConnectionWrapperAsync(CancellationToken.None, false))
-            {
-                await VerifyCommandResults(connectionWrapperWithTransaction, newId, false, "WITH (READUNCOMMITTED)");
-            }
-        }
-
-        [Fact]
-        public async Task GivenATransactionScope_WhenReadingAfterComplete_TheValuesShouldBeAvailable()
-        {
-            var newId = Guid.NewGuid().ToString();
-            var searchParamHash = new string("RandomSearchParam").ComputeHash();
-
-            using (var transactionScope = _fixture.SqlTransactionHandler.BeginTransaction())
-            {
-                using (SqlConnectionWrapper connectionWrapperWithTransaction = await _fixture.SqlConnectionWrapperFactory.ObtainSqlConnectionWrapperAsync(CancellationToken.None, true))
-                using (SqlCommandWrapper sqlCommandWrapper = connectionWrapperWithTransaction.CreateRetrySqlCommand())
-                {
-                    sqlCommandWrapper.CommandText = @"
-                        INSERT INTO Resource
-                        VALUES(97, @newId, 1, 0, 5095719085917680001, 0, null, CAST('test' AS VARBINARY(MAX)), 0, @searchParamHash)";
-
-                    sqlCommandWrapper.Parameters.Add(new SqlParameter { ParameterName = "newId", Value = newId });
-                    sqlCommandWrapper.Parameters.Add(new SqlParameter { ParameterName = "searchParamHash", Value = searchParamHash });
-
-                    await sqlCommandWrapper.ExecuteNonQueryAsync(CancellationToken.None);
-                }
-
-                transactionScope.Complete();
-            }
-
-            // Outside of the transaction scope, the resource should not be found
-            using (SqlConnectionWrapper connectionWrapperWithTransaction = await _fixture.SqlConnectionWrapperFactory.ObtainSqlConnectionWrapperAsync(CancellationToken.None, false))
-            {
-                await VerifyCommandResults(connectionWrapperWithTransaction, newId, true);
-            }
-        }
-
         private static async Task VerifyCommandResults(SqlConnectionWrapper connectionWrapper, string newId, bool shouldFind, string tableHints = "")
         {
             using (SqlCommandWrapper sqlCommandWrapper = connectionWrapper.CreateRetrySqlCommand())
diff --git a/test/Microsoft.Health.Fhir.Stu3.Tests.E2E/Rest/VersionSpecificTests.cs b/test/Microsoft.Health.Fhir.Stu3.Tests.E2E/Rest/VersionSpecificTests.cs
index a3fcd5d8..b94769b1 100644
--- a/test/Microsoft.Health.Fhir.Stu3.Tests.E2E/Rest/VersionSpecificTests.cs
+++ b/test/Microsoft.Health.Fhir.Stu3.Tests.E2E/Rest/VersionSpecificTests.cs
@@ -23,14 +23,5 @@ namespace Microsoft.Health.Fhir.Tests.E2E.Rest
         {
             await TestCapabilityStatementFhirVersion("3.0.2");
         }
-
-        [Fact]
-        [HttpIntegrationFixtureArgumentSets(DataStore.SqlServer)]
-        public async Task GivenAnObservation_WithInvalidDecimalSpecification_ThenBadRequestShouldBeReturned()
-        {
-            var resource = Samples.GetJsonSample<Observation>("ObservationWithInvalidDecimalSpecification");
-            using FhirException exception = await Assert.ThrowsAsync<FhirException>(() => _client.CreateAsync(resource));
-            Assert.Equal(HttpStatusCode.BadRequest, exception.StatusCode);
-        }
     }
 }
-- 
2.35.1.windows.2

